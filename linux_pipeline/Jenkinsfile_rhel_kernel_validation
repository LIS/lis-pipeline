#!/usr/bin/env groovy

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

withCredentials(bindings: [string(credentialsId: 'LIS_ARCHIVE_LINK', variable: 'LIS_ARCHIVE_LINK')]) {
    properties ([
        pipelineTriggers([cron('H H/12 * * *')]),
        [$class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
            [$class: 'StringParameterDefinition',
                name: 'LIS_LINK',
                defaultValue: "${LIS_ARCHIVE_LINK}",
                description: 'Link to the lis package to be tested']
            ]
        ]
    ])
}

def sendMail = true
def stashList = []
def azureSku = ["rhel_6.7": "6.7", "rhel_6.8": "6.8", "rhel_6.9": "6.9", "rhel_6.10": "6.10", "rhel_7.3": "7.3", "rhel_7.4": "7.4", "rhel_7.5": "7-RAW", "rhel_7.6": "7.6"]

def getVersionFromURL(lisLink){
    def realLink = ""
    def lisVer = ""

    if (lisLink.contains("tar.gz")){
        realLink = lisLink
    } else {
        realLink = sh (returnStdout: true, script: """
            curl -Ls -o /dev/null -w %{url_effective} "${lisLink}"
        """)
    }
    lisVer = realLink.split("/")
    return lisVer[lisVer.size() - 1].split(".tar.gz")[0]
}

stage ("Check for kernel") {
    node ("monitor-hyperv") {
        withCredentials(bindings: [string(credentialsId: 'UTILS_DIR', variable: 'UTILS_DIR'),
            string(credentialsId: 'REMOTE_HTML_LOCATION', variable: 'REMOTE_HTML_LOCATION')]) {
            dir ("check_versions-" + env.BUILD_NUMBER + env.BRANCH_NAME) {
                checkout scm
                echo 'Checking if there is a new kernel version'
                PowerShellWrapper('''
                    & ".\\scripts\\rhel_validation\\get_kernel_version.ps1"
                        -WorkDir '.\\temp'
                        -UtilsDir "${env:UTILS_DIR}"
                        -LatestVersionsFile "${env:UTILS_DIR}\\latest_tested_versions.txt"
                        -RemoteHtmlLocation "${env:REMOTE_HTML_LOCATION}"
                        -OutputFile "kernel_versions.txt"
                        -RepoListOutFile "Kernel_Repolist.txt"
                ''') // LatestVersionsFile changed
                stash includes: 'kernel_versions.txt', name: 'kernel_versions'
                stash includes: 'Kernel_Repolist.txt', name: 'Kernel_Repolist'
                echo 'Kernel versions checked'
                deleteDir()
            }
        }
    }
}

stage ("Test kernel") {
    node ("jenkins-meta-slave") {
        def runNumber = 1
        def runs = [:]
        def kernelrepolist = ""
        dir ("rhel_versions-" + env.BUILD_NUMBER + env.BRANCH_NAME) {
            unstash 'kernel_versions'
            unstash 'Kernel_Repolist'
        }
        versionsPath = "./rhel_versions-${env.BUILD_NUMBER}${env.BRANCH_NAME}/kernel_versions.txt"
        kernelVersions = readFile(versionsPath)
        if (!kernelVersions) {
            sendMail = false
            echo "No new kernel versions were found"
            currentBuild.result = 'SUCCESS'
            return
        }
        kernelrepolistPath = "./rhel_versions-${env.BUILD_NUMBER}${env.BRANCH_NAME}/Kernel_Repolist.txt"
        kernelrepolists = readFile(kernelrepolistPath)
        kernelrepolists = kernelrepolists.trim().replaceAll("[^A-Za-z0-9.=_;\\-\\^\\s]", "").split(";")
        kernelVersions = kernelVersions.replaceAll("[^A-Za-z0-9.=_;\\-]", "").split(";")
        kernelVersions.each() {
            def distro = it.split("=")[0]
            def version = it.split("=")[1]
            runs["${distro}-${version}"] = {
                stage ("${distro}-${version}") {
                withCredentials(bindings: [usernamePassword(credentialsId: 'RHEL_ACCOUNT',passwordVariable: 'PASSWORD',usernameVariable: 'USERNAME'),
                    string(credentialsId: 'AZURE_SAS', variable: 'AZURE_SAS'),
                    file(credentialsId: 'LIS_HOTFIX_CONFIGURE_FILE', variable: 'LIS_HOTFIX_CONFIGURE_FILE')]) {
                    dir ("r-${distro}-${version}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                        def vmNumber = runNumber
                        runNumber = runNumber + 1
                        checkout scm
                        echo "Testing kernel: ${version} on distro: ${distro}"
                        for (line in kernelrepolists) {
                            def kernel = line.trim().split("=")[0]
                            def repolist = line.trim().split("=")[1]
                            if (kernel.matches(version)) {
                                kernelrepolist=repolist
                                break
                            }
                        }
                        def exitCode = sh (returnStatus: true, script: """
                            . ${LIS_HOTFIX_CONFIGURE_FILE}
                            bash scripts/rhel_validation/validate_rhel_vm.sh \
                                --workdir "r-${distro}-${version}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}" \
                                --build_name "rpm-lis" --build_number "${BUILD_NUMBER}${BRANCH_NAME}${vmNumber}" \
                                --os_type "${distro}" --kernel_version "${version}" \
                                --lis_link "${LIS_LINK}" \
                                --log_destination "." \
                                --rhel_username '${USERNAME}' \
                                --rhel_password '${PASSWORD}' \
                                --sku "${azureSku[distro]}" \
                                --kernelrepolist "${kernelrepolist}" \
                                --storage_account "\${LIS_HOTFIX_STORAGE_ACCOUNT}" \
                                --storage_token "\${LIS_HOTFIX_STORAGE_ACCOUNT_SAS_KEY}" \
                                --azcopy_download_link "\${AZCOPY_DOWNLOAD_LINK}" \
                                --azure_token '${AZURE_SAS}'
                        """)
                        archiveArtifacts artifacts: "${distro}_lis_install.log"
                        archiveArtifacts artifacts: "${distro}_lis_check.log"
                        stashList << distro
                        stash includes: '*.log', name: distro
                        if (exitCode == 0) {
                            sh (returnStatus: true, script: """
                                bash scripts/azure_kernel_validation/remove_azure_vm_resources.sh \
                                    "rpm-lis${BUILD_NUMBER}${BRANCH_NAME}${vmNumber}"
                            """)
                            } else {
                                currentBuild.result = 'FAILURE'
                            }
                        deleteDir()
                    }
                }
                }
            }
        }
        parallel runs
    }
}

stage ("Send Email Report"){
    node ("jenkins-meta-slave") {
        if (!sendMail) {
            return
        }
        withCredentials(bindings: [string(credentialsId: 'REDHAT_VAL_MAIL_LIST', variable: 'REDHAT_VAL_MAIL_LIST')]) {
            dir ("mail-send-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                def lisVersion = getVersionFromURL(env.LIS_LINK)
                def body = "<pre>"
                body += "\nLIS Version: ${lisVersion}\n"

                stashList.each() {
                    unstash it
                    body += readFile("${it}_lis_check.log")
                    body += "\n"
                }
                body += "</pre>"
                emailext (
                    subject: "Redhat LIS validation report",
                    to: "${env.REDHAT_VAL_MAIL_LIST}",
                    mimeType : "text/html",
                    attachmentsPattern: "*_lis_*.log",
                    body: body
                )
                deleteDir()
            }
        }
    }
}

stage ("Trigger Hotfix"){
    node ("jenkins-meta-slave") {
        if (!sendMail) {
            return
        }
        def TestDistros = ""
        def TriggerHotfix = true
        dir ("trigger-hotfix-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
            for (distro in stashList) {
                unstash distro
                VersionLog = readFile("${distro}_lis_check.log")
                InstallLog = readFile("${distro}_lis_install.log")
                if (InstallLog.matches("(?is).*ERRATA kernel (.*) not installed.*")) {
                    echo "Failed to Trigger Hot-fix pipeline since detected errata kernel installation is failed"
                    echo InstallLog
                    TriggerHotfix = false
                    break
                }
                if (VersionLog.contains("built-in driver")) {
                    def Kernelversion = (VersionLog =~ "Running kernel version: (.*).x86_64")[0][1]
                    TestDistros+="${distro}=${Kernelversion}"+"\n"
                }
            }
            if(TestDistros && TriggerHotfix){
                TestDistros=TestDistros.trim()
                echo "TRIGGER the HOT-FIX pipline for non-compatible Errata kernels ${TestDistros}"
                build job: 'LIS/pipeline-lis-hotfix', parameters: [ text(name: 'DISTRO_KERNEL', value: "${TestDistros}")],
                wait: false
            }
            deleteDir()
        }
    }
}
