#!/usr/bin/env groovy

def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def reportStageStatus(stageName, stageStatus) {
    script {
        env.STAGE_NAME_REPORT = stageName
        env.STAGE_STATUS_REPORT = stageStatus
    }
    withCredentials(bindings: [file(credentialsId: 'KERNEL_QUALITY_REPORTING_DB_CONFIG',
                                    variable: 'PERF_DB_CONFIG')]) {
        dir('kernel_version_report' + env.BUILD_NUMBER + env.BRANCH_NAME) {
              unstash 'kernel_version_ini'
              sh returnStatus: true, script: '''
                  #!/bin/bash
                  KERNEL_SOURCE="${KERNEL_GIT_URL##*/}"
                  KERNEL_SOURCE="${KERNEL_SOURCE%.*}"
                  KERNEL_SOURCE=$(echo $KERNEL_SOURCE | tr /a-z/ /A-Z/)
                  bash "${WORKSPACE}/scripts/reporting/report_stage_state.sh" \
                      --pipeline_name "pipeline-linux-upstream-validation/${BRANCH_NAME}" \
                      --pipeline_build_number "${BUILD_NUMBER}" \
                      --pipeline_stage_status "${STAGE_STATUS_REPORT}" \
                      --pipeline_stage_name "${STAGE_NAME_REPORT}" \
                      --kernel_info "./scripts/package_building/kernel_versions.ini" \
                      --kernel_source "${KERNEL_SOURCE}" --kernel_branch "${KERNEL_GIT_BRANCH}" \
                      --distro_version "${DISTRO_VERSION}" --db_config "${PERF_DB_CONFIG}" || true
              '''
        }
    }
}


def getVhdLocation(basePath, distroVersion) {
    def distroFamily = distroVersion.split('_')[0]
    return "${basePath}\\" + distroFamily + "\\" + distroVersion + "\\" + distroVersion + ".vhdx"
}

def prepareEnv(branch, remote, distroVersion, functionalTests) {
    cleanWs()
    git branch: branch, url: remote
    script {
      env.AZURE_OS_IMAGE = env.AZURE_UBUNTU_IMAGE_BIONIC
      env.PACKAGE_TYPE = "deb"
      if (distroVersion.toLowerCase().contains("centos")) {
        env.AZURE_OS_IMAGE = env.AZURE_CENTOS_7_IMAGE
        env.PACKAGE_TYPE = "rpm"
      }
      if (functionalTests.contains('ALL')) {
          env.LISAV2_PARAMS = "-TestCategory 'Functional'"
      }
      if (functionalTests.contains('BVT')) {
          env.LISAV2_PARAMS = "-TestCategory 'BVT'"
      }
      if (functionalTests.contains('FVT')) {
          env.LISAV2_PARAMS = "-TestCategory 'Functional' -TestArea 'KVP,FCOPY,CORE,LIS,NETWORK,KDUMP,STORAGE,PROD_CHECKPOINT,DYNAMIC_MEMORY,RUNTIME_MEMORY,BACKUP'"
      }
    }
}

def unstashKernel(kernelStash) {
    unstash kernelStash
    powershell """
        \$rmPath = "\${env:ProgramFiles}\\Git\\usr\\bin\\rm.exe"
        \$basePath = "./scripts/package_building/${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${kernelStash}/*/${env.PACKAGE_TYPE}"

        & \$rmPath -rf "\${basePath}/*dbg*"
        & \$rmPath -rf "\${basePath}/*devel*"
        & \$rmPath -rf "\${basePath}/*debug*"
    """
}


pipeline {
  parameters {
    choice(choices: 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git\nhttps://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git\ngit://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git', description: 'Kernel tree repo (upstream, net-next, linux stable)', name: 'KERNEL_GIT_URL')
    string(defaultValue: "master", description: 'Branch to be built', name: 'KERNEL_GIT_BRANCH')
    choice(choices: 'Ubuntu_18.04.1\nCentOS_7.5', description: 'Distro version.', name: 'DISTRO_VERSION')
    choice(choices: 'Standard_E64_v3\nStandard_F72s_v2', description: 'Azure large boot flavor', name: 'LISAV2_AZURE_VM_SIZE_LARGE')
    choice(choices: 'False\nTrue', description: 'Enable kernel debug', name: 'KERNEL_DEBUG')
    choice(choices: 'BVT\nFVT\nALL', description: 'Functional Tests', name: 'FUNCTIONAL_TESTS')
    string(defaultValue: "build_artifacts, publish_temp_artifacts, boot_test, publish_artifacts, validation_functional, validation_functional_hyperv, publish_azure_vhd, validation_functional_azure, validation_perf_azure, validation_perf_hyperv",
           description: 'What stages to run', name: 'ENABLED_STAGES')
  }
  environment {
    LISAV2_REMOTE = "https://github.com/lis/LISAv2.git"
    LISAV2_BRANCH = "master"
    LISAV2_HYPERV_REGION = "hyper-v"
    LISAV2_AZURE_REGION = "westus2"
    LISAV2_RG_IDENTIFIER = "upstreamk"
    KERNEL_ARTIFACTS_PATH = 'upstream-kernel-artifacts'
    UBUNTU_VERSION = '16'
    BUILD_PATH = '/mnt/tmp/upstream-kernel-build-folder'
    KERNEL_CONFIG = 'Microsoft/config-azure'
    CLEAN_ENV = 'True'
    USE_CCACHE = 'True'
    BUILD_NAME = 'u'
    CREATE_CHANGELOG = 'False'
    INSTALL_DEPS = 'True'
    USE_KERNEL_FOLDER_PREFIX = 'True'
    THREAD_NUMBER = 'x3'
    AZURE_UBUNTU_IMAGE_BIONIC = "Canonical UbuntuServer 18.04-DAILY-LTS latest"
    AZURE_CENTOS_7_IMAGE = "OpenLogic CentOS 7.5 latest"
    FUNC_FAIL_ONAZURE = 0
    FUNC_FAIL_ONLOCAL = 0
    FUNC_PASS_ONAZURE = 0
    FUNC_PASS_ONLOCAL = 0
    FUNC_ABORT_ONAZURE = 0
    FUNC_ABORT_ONLOCAL = 0
  }
  options {
    overrideIndexTriggers(false)
  }
  agent {
    node {
      label 'meta_slave'
    }
  }
  stages {
          stage('build_artifacts_ubuntu') {
              when {
                beforeAgent true
                expression { params.DISTRO_VERSION.toLowerCase().contains('ubuntu') }
                expression { params.ENABLED_STAGES.contains('build_artifacts') }
              }
              agent {
                node {
                  label 'ubuntu_kernel_builder'
                }
              }
              steps {
              stash includes: 'scripts/package_building/kernel_versions.ini', name: 'kernel_version_ini'
              sh '''#!/bin/bash
                set -xe
                echo "Building artifacts..."
                pushd "$WORKSPACE/scripts/package_building"
                bash build_artifacts.sh \\
                    --git_url "${KERNEL_GIT_URL}" \\
                    --git_branch "${KERNEL_GIT_BRANCH}" \\
                    --destination_path "${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}" \\
                    --install_deps "${INSTALL_DEPS}" \\
                    --thread_number "${THREAD_NUMBER}" \\
                    --debian_os_version "${UBUNTU_VERSION}" \\
                    --build_path "${BUILD_PATH}" \\
                    --kernel_config "${KERNEL_CONFIG}" \\
                    --clean_env "${CLEAN_ENV}" \\
                    --use_ccache "${USE_CCACHE}" \\
                    --use_kernel_folder_prefix "${USE_KERNEL_FOLDER_PREFIX}" \\
                    --create_changelog "${CREATE_CHANGELOG}" \\
                    --enable_kernel_debug "${KERNEL_DEBUG}"
                popd
                '''
                sh '''#!/bin/bash
                  echo ${BUILD_NUMBER}-$(crudini --get scripts/package_building/kernel_versions.ini KERNEL_BUILT folder) > ./build_name
                '''
                script {
                  currentBuild.displayName = readFile "./build_name"
                }
                writeFile file: 'ARM_IMAGE_NAME.azure.env', text: 'Canonical UbuntuServer 16.04-LTS latest'
                writeFile file: 'ARM_OSVHD_NAME.azure.env', text: "SS-AUTOBUILT-Canonical-UbuntuServer-16.04-LTS-latest-${BUILD_NAME}${BUILD_NUMBER}.vhd"
                writeFile file: 'KERNEL_PACKAGE_NAME.azure.env', text: 'testKernel.deb'

                stash includes: '*.azure.env', name: 'azure.env'
                stash includes: 'scripts/package_building/kernel_versions.ini', name: 'kernel_version_ini'
                stash includes: ("scripts/package_building/${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/deb/**"),
                      name: "${env.KERNEL_ARTIFACTS_PATH}"
                sh '''
                    set -xe
                    rm -rf "scripts/package_building/${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}"
                '''
                archiveArtifacts 'scripts/package_building/kernel_versions.ini'
              }
              post {
                failure {
                  reportStageStatus("BuildSucceeded", 0)
                }
                success {
                  reportStageStatus("BuildSucceeded", 1)
                }
              }
          }
          stage('build_artifacts_centos') {
              when {
                beforeAgent true
                expression { params.DISTRO_VERSION.toLowerCase().contains('centos') }
                expression { params.ENABLED_STAGES.contains('build_artifacts') }
              }
              agent {
                node {
                  label 'centos_kernel_builder'
                }
              }
              steps {
                stash includes: 'scripts/package_building/kernel_versions.ini', name: 'kernel_version_ini'
                sh '''#!/bin/bash
                set -xe
                echo "Building artifacts..."
                pushd "$WORKSPACE/scripts/package_building"
                bash build_artifacts.sh \\
                    --git_url "${KERNEL_GIT_URL}" \\
                    --git_branch "${KERNEL_GIT_BRANCH}" \\
                    --destination_path "${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}" \\
                    --install_deps "${INSTALL_DEPS}" \\
                    --thread_number "${THREAD_NUMBER}" \\
                    --build_path "${BUILD_PATH}" \\
                    --kernel_config "${KERNEL_CONFIG}" \\
                    --clean_env "${CLEAN_ENV}" \\
                    --use_ccache "${USE_CCACHE}" \\
                    --use_kernel_folder_prefix "${USE_KERNEL_FOLDER_PREFIX}" \\
                popd
                '''
                sh '''#!/bin/bash
                  echo ${BUILD_NUMBER}-$(crudini --get scripts/package_building/kernel_versions.ini KERNEL_BUILT folder) > ./build_name
                '''
                script {
                  currentBuild.displayName = readFile "./build_name"
                }
                writeFile file: 'ARM_IMAGE_NAME.azure.env', text: 'OpenLogic CentOS 7.4 latest'
                writeFile file: 'ARM_OSVHD_NAME.azure.env', text: "SS-AUTOBUILT-OpenLogic-CentOS-7.4-latest-${BUILD_NAME}${BUILD_NUMBER}.vhd"
                writeFile file: 'KERNEL_PACKAGE_NAME.azure.env', text: 'testKernel.rpm'

                stash includes: '*.azure.env', name: 'azure.env'
                stash includes: 'scripts/package_building/kernel_versions.ini', name: 'kernel_version_ini'
                stash includes: ("scripts/package_building/${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/rpm/**"),
                      name: "${env.KERNEL_ARTIFACTS_PATH}"
                sh '''
                    set -xe
                    rm -rf "scripts/package_building/${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}"
                '''
                archiveArtifacts 'scripts/package_building/kernel_versions.ini'
              }
              post {
                failure {
                  reportStageStatus("BuildSucceeded", 0)
                }
                success {
                  reportStageStatus("BuildSucceeded", 1)
                }
              }
    }
    stage('publish_temp_artifacts') {
      when {
        beforeAgent true
        expression { params.ENABLED_STAGES.contains('publish_temp_artifacts') }
      }
      agent {
        node {
          label 'meta_slave'
        }
      }
      steps {
        dir("${env.KERNEL_ARTIFACTS_PATH}${env.BUILD_NUMBER}${env.BRANCH_NAME}") {
            unstash "${env.KERNEL_ARTIFACTS_PATH}"
            withCredentials([string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                               usernamePassword(credentialsId: 'smb_share_user_pass',
                                                passwordVariable: 'PASSWORD',
                                                usernameVariable: 'USERNAME')]) {
                sh '''#!/bin/bash
                    set -xe
                    folder_prefix="${KERNEL_GIT_URL##*/}"
                    folder_prefix="${folder_prefix%.*}"
                    bash "${WORKSPACE}/scripts/utils/publish_artifacts_to_smb.sh" \\
                        --build_number "${BUILD_NUMBER}-${BRANCH_NAME}" \\
                        --smb_url "${SMB_SHARE_URL}/temp-kernel-artifacts" --smb_username "${USERNAME}" \\
                        --smb_password "${PASSWORD}" --artifacts_path "${KERNEL_ARTIFACTS_PATH}" \\
                        --artifacts_folder_prefix "${folder_prefix}"
                '''
            }
        }
      }
    }
    stage('boot_test') {
      when {
        beforeAgent true
        expression { params.ENABLED_STAGES.contains('boot_test') }
      }
      post {
        failure {
          reportStageStatus("BootOnAzure", 0)
        }
        success {
          reportStageStatus("BootOnAzure", 1)
        }
      }
      parallel {
        stage('boot_test_large') {
            when {
              beforeAgent true
              expression { params.ENABLED_STAGES.contains('boot_test_large') }
            }
            agent {
              node {
                label 'azure'
              }
            }
            steps {
                withCredentials(bindings: [
                  file(credentialsId: 'CBS_Azure_Secrets_File',
                       variable: 'Azure_Secrets_File')
                ]) {
                    prepareEnv(LISAV2_BRANCH, LISAV2_REMOTE, DISTRO_VERSION, FUNCTIONAL_TESTS)
                    unstashKernel(env.KERNEL_ARTIFACTS_PATH)
                    RunPowershellCommand(".\\Run-LisaV2.ps1" +
                        " -TestLocation '${LISAV2_AZURE_REGION}'" +
                        " -RGIdentifier '${LISAV2_RG_IDENTIFIER}'" +
                        " -TestPlatform 'Azure'" +
                        " -CustomKernel 'localfile:./scripts/package_building/${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/*/${env.PACKAGE_TYPE}/*.${env.PACKAGE_TYPE}'" +
                        " -OverrideVMSize '${LISAV2_AZURE_VM_SIZE_LARGE}'" +
                        " -ARMImageName '${AZURE_OS_IMAGE}'" +
                        " -TestNames 'BVT-CORE-VERIFY-LIS-MODULES'" +
                        " -StorageAccount 'ExistingStorage_Standard'" +
                        " -XMLSecretFile '${Azure_Secrets_File}'" +
                        " -CustomParameters 'DiskType = Managed'"
                    )
                }
            }
            post {
              always {
                junit "Report\\*-junit.xml"
                archiveArtifacts "TestResults\\**\\*"
              }
            }
        }
        stage('boot_test_small') {
            agent {
              node {
                label 'azure'
              }
            }
            steps {
                withCredentials(bindings: [
                  file(credentialsId: 'CBS_Azure_Secrets_File',
                       variable: 'Azure_Secrets_File')
                ]) {
                    prepareEnv(LISAV2_BRANCH, LISAV2_REMOTE, DISTRO_VERSION, FUNCTIONAL_TESTS)
                    unstashKernel(env.KERNEL_ARTIFACTS_PATH)
                    RunPowershellCommand(".\\Run-LisaV2.ps1" +
                        " -TestLocation '${LISAV2_AZURE_REGION}'" +
                        " -RGIdentifier '${LISAV2_RG_IDENTIFIER}'" +
                        " -TestPlatform 'Azure'" +
                        " -CustomKernel 'localfile:./scripts/package_building/${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/*/${env.PACKAGE_TYPE}/*.${env.PACKAGE_TYPE}'" +
                        " -ARMImageName '${AZURE_OS_IMAGE}'" +
                        " -TestNames 'BVT-CORE-VERIFY-LIS-MODULES'" +
                        " -StorageAccount 'ExistingStorage_Standard'" +
                        " -XMLSecretFile '${Azure_Secrets_File}'" +
                        " -CustomParameters 'DiskType = Managed'"
                    )
                }
            }
            post {
              always {
                junit "Report\\*-junit.xml"
                archiveArtifacts "TestResults\\**\\*"
              }
            }
          }
      }
    }
    stage('publish_artifacts') {
      when {
        beforeAgent true
        expression { params.ENABLED_STAGES.contains('publish_artifacts') }
      }
      agent {
        node {
          label 'meta_slave'
        }
      }
      steps {
        dir("${env.KERNEL_ARTIFACTS_PATH}${env.BUILD_NUMBER}${env.BRANCH_NAME}") {
            unstash "${env.KERNEL_ARTIFACTS_PATH}"
            withCredentials([string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                               usernamePassword(credentialsId: 'smb_share_user_pass', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')
                               ]) {
                sh '''#!/bin/bash
                    set -xe
                    folder_prefix="${KERNEL_GIT_URL##*/}"
                    folder_prefix="${folder_prefix%.*}"
                    bash "${WORKSPACE}/scripts/utils/publish_artifacts_to_smb.sh" \\
                        --build_number "${BUILD_NUMBER}-${BRANCH_NAME}" \\
                        --smb_url "${SMB_SHARE_URL}/${folder_prefix}" --smb_username "${USERNAME}" \\
                        --smb_password "${PASSWORD}" --artifacts_path "${KERNEL_ARTIFACTS_PATH}" \\
                        --artifacts_folder_prefix "${folder_prefix}"
                '''
            }
        }
      }
    }
    stage('publish_azure_vhd') {
      when {
        beforeAgent true
        expression { params.ENABLED_STAGES.contains('publish_azure_vhd') }
      }
      agent {
        node {
          label 'azure'
        }
      }
      steps {
        withCredentials(bindings: [
          file(credentialsId: 'CBS_Azure_Secrets_File',
               variable: 'Azure_Secrets_File')
        ]) {
            prepareEnv(LISAV2_BRANCH, LISAV2_REMOTE, DISTRO_VERSION, FUNCTIONAL_TESTS)
            unstashKernel(env.KERNEL_ARTIFACTS_PATH)
            RunPowershellCommand(".\\Run-LisaV2.ps1" +
                " -TestLocation '${LISAV2_AZURE_REGION}'" +
                " -RGIdentifier '${LISAV2_RG_IDENTIFIER}'" +
                " -TestPlatform 'Azure'" +
                " -CustomKernel 'localfile:./scripts/package_building/${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/*/${env.PACKAGE_TYPE}/*.${env.PACKAGE_TYPE}'" +
                " -ARMImageName '${AZURE_OS_IMAGE}'" +
                " -TestNames 'CAPTURE-VHD-BEFORE-TEST'" +
                " -XMLSecretFile '${Azure_Secrets_File}'"
            )
            script {
                env.CapturedVHD = readFile 'CapturedVHD.azure.env'
            }
            stash includes: 'CapturedVHD.azure.env', name: 'CapturedVHD.azure.env'
            println("Captured VHD : ${env.CapturedVHD}")
        }
      }
      post {
        always {
          junit "Report\\*-junit.xml"
          archiveArtifacts "TestResults\\**\\*"
        }
      }
    }

    stage('validation') {
      parallel {

        stage('validation_functional_hyperv') {
          when {
            beforeAgent true
            expression { params.ENABLED_STAGES.contains('validation_functional_hyperv') }
          }
          agent {
            node {
              label 'hyper-v'
            }
          }
          steps {
            withCredentials(bindings: [
              file(credentialsId: 'HyperV_Secrets_File',
                   variable: 'HyperV_Secrets_File'),
              string(credentialsId: 'LISAV2_IMAGES_SHARE_URL',
                   variable: 'LISAV2_IMAGES_SHARE_URL')
            ]) {
                prepareEnv(LISAV2_BRANCH, LISAV2_REMOTE, DISTRO_VERSION, FUNCTIONAL_TESTS)
                unstashKernel(env.KERNEL_ARTIFACTS_PATH)
                script {
                  env.HYPERV_VHD_PATH = getVhdLocation(LISAV2_IMAGES_SHARE_URL, DISTRO_VERSION)
                }
                println("Current VHD: ${env.HYPERV_VHD_PATH}")
                RunPowershellCommand(".\\Run-LisaV2.ps1" +
                    " -TestLocation 'localhost'" +
                    " -RGIdentifier '${LISAV2_RG_IDENTIFIER}'" +
                    " -TestPlatform 'HyperV'" +
                    "${LISAV2_PARAMS}" +
                    " -CustomKernel 'localfile:./scripts/package_building/${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/*/${env.PACKAGE_TYPE}/*.${env.PACKAGE_TYPE}'" +
                    " -OsVHD '${HYPERV_VHD_PATH}'" +
                    " -XMLSecretFile '${HyperV_Secrets_File}'" +
                    " -ExitWithZero"
                )
            }
          }
          post {
            always {
              junit "Report\\*-junit.xml"
              archiveArtifacts "TestResults\\**\\*"
              script {
                    def returnValues = powershell returnStdout: true, script: '''$content = [xml](Get-Content ".\\Report\\*-junit.xml")
                        $failCase = [int]($content.testsuites.testsuite.failures)
                        $allCase = [int]($content.testsuites.testsuite.tests)
                        $abortCase = [int]($content.testsuites.testsuite.errors)
                        $passCase = $allCase - $failCase - $abortCase
                        return [string]::Format("{0};{1};{2}",$failCase,$abortCase,$passCase)
                        '''
                        returnValues = returnValues.replaceAll("\r", "").replaceAll("\n", "")
                        returnValues = returnValues.split(';')
                        FUNC_FAIL_ONLOCAL = returnValues[0]
                        FUNC_ABORT_ONLOCAL = returnValues[1]
                        FUNC_PASS_ONLOCAL = returnValues[2]
               }
            }
          }
        }

        stage('validation_functional_azure') {
          when {
            beforeAgent true
            expression { params.ENABLED_STAGES.contains('validation_functional_azure') }
          }
          agent {
            node {
              label 'azure'
            }
          }
          steps {
            withCredentials(bindings: [
              file(credentialsId: 'CBS_Azure_Secrets_File',
                   variable: 'Azure_Secrets_File')
            ]) {
                prepareEnv(LISAV2_BRANCH, LISAV2_REMOTE, DISTRO_VERSION, FUNCTIONAL_TESTS)
                unstash 'CapturedVHD.azure.env'
                script {
                    env.CapturedVHD = readFile 'CapturedVHD.azure.env'
                }
                println("VHD under test : ${env.CapturedVHD}")
                RunPowershellCommand(".\\Run-LisaV2.ps1" +
                    " -TestLocation '${LISAV2_AZURE_REGION}'" +
                    " -RGIdentifier '${LISAV2_RG_IDENTIFIER}'" +
                    " -TestPlatform 'Azure'" +
                    "${LISAV2_PARAMS}" +
                    " -OsVHD '${CapturedVHD}'" +
                    " -XMLSecretFile '${Azure_Secrets_File}'" +
                    " -ExitWithZero"
                )
            }
          }
          post {
            always {
              junit "Report\\*-junit.xml"
              archiveArtifacts "TestResults\\**\\*"
              script {
                    def returnValues = powershell returnStdout: true, script: '''$content = [xml](Get-Content ".\\Report\\*-junit.xml")
                        $failCase = [int]($content.testsuites.testsuite.failures)
                        $allCase = [int]($content.testsuites.testsuite.tests)
                        $abortCase = [int]($content.testsuites.testsuite.errors)
                        $passCase = $allCase - $failCase - $abortCase
                        return [string]::Format("{0};{1};{2}",$failCase,$abortCase,$passCase)
                        '''
                        returnValues = returnValues.replaceAll("\r", "").replaceAll("\n", "")
                        returnValues = returnValues.split(';')
                        FUNC_FAIL_ONAZURE = returnValues[0]
                        FUNC_ABORT_ONAZURE = returnValues[1]
                        FUNC_PASS_ONAZURE = returnValues[2]
               }
            }
          }
        }

        stage('validation_perf_azure_net') {
          when {
            beforeAgent true
            expression { params.ENABLED_STAGES.contains('validation_perf_azure') }
          }
          agent {
            node {
              label 'azure'
            }
          }
          steps {
            println("TBD")
          }
        }

        stage('validation_perf_azure_stor') {
          when {
            beforeAgent true
            expression { params.ENABLED_STAGES.contains('validation_perf_azure') }
          }
          agent {
            node {
              label 'azure'
            }
          }
          steps {
            println("TBD")
          }
        }

        stage('validation_perf_hyperv') {
          when {
            beforeAgent true
            expression { params.ENABLED_STAGES.contains('validation_perf_hyperv') }
            expression { params.DISTRO_VERSION.toLowerCase().contains('ubuntu') }
          }
          agent {
            node {
              label "net_perf"
            }
          }
          steps {
            println("TBD")
          }
        }

        stage('validation_sriov_hyperv') {
          when {
            beforeAgent true
            expression { params.ENABLED_STAGES.contains('validation_sriov_hyperv') }
            expression { params.DISTRO_VERSION.toLowerCase().contains('ubuntu') }
          }
          agent {
            node {
              label 'sriov_mlnx'
            }
          }
          steps {
            println("TBD")
          }
        }
      }
    }

    stage('publish_results') {
      when {
        beforeAgent true
        expression { params.ENABLED_STAGES.contains('publish_results') }
      }
      agent {
        node {
          label 'meta_slave'
        }
      }
      steps {
        reportStageStatus("FuncTestsFailedOnLocal", "${FUNC_FAIL_ONLOCAL}")
        reportStageStatus("FuncTestsFailedOnAzure", "${FUNC_FAIL_ONAZURE}")
        reportStageStatus("FuncTestsPassOnLocal", "${FUNC_PASS_ONLOCAL}")
        reportStageStatus("FuncTestsPassOnAzure", "${FUNC_PASS_ONAZURE}")
        reportStageStatus("FuncTestsAbortOnLocal", "${FUNC_FAIL_ONLOCAL}")
        reportStageStatus("FuncTestsAbortOnAzure", "${FUNC_FAIL_ONAZURE}")
      }
    }

  }
}
