#!/usr/bin/env groovy

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

properties ([
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_FOLDER_PATH',
            defaultValue: 'latest',
            description: 'Kernel folder to be uploaded. Use latest for the last built version existent on the share.'],
        [$class: 'ChoiceParameterDefinition', choices: 'testing\nstable\n',
            name: 'REPO_TYPE',
            description: 'The repo type where the kernel will be uploaded.'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            name: 'UPLOAD_TO_SKYPE',
            description: 'Whether to upload into skpye repo.'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            name: 'UPLOAD_TO_LINKEDIN',
            description: 'Whether to upload into linkedin repo.']
        ]
    ],
    pipelineTriggers([cron('H 12 * * 3')])
])

node("meta_slave") {
    stage('get_kernel') {
        withCredentials([string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                         usernamePassword(credentialsId: 'smb_share_user_pass',
                                          passwordVariable: 'SMB_SHARE_PASSWORD',
                                          usernameVariable: 'SMB_SHARE_USERNAME')]) {
            cleanWs()
            checkout scm
            echo "Get the kernel files from the repo."
            sh '''
              bash "${WORKSPACE}/scripts/kernel_repo_upload/get_kernel_folder.sh" --job_id "${BUILD_NUMBER}-${BRANCH_NAME}" \
                  --kernel_folder_path "${KERNEL_FOLDER_PATH}" --smb_share_url "${SMB_SHARE_URL}" \
                  --smb_share_username "${SMB_SHARE_USERNAME}" --smb_share_password "${SMB_SHARE_PASSWORD}"
            '''
            script {
              env.KERNEL_TRANSLATED_FOLDER = readFile "${env.WORKSPACE}/${env.BUILD_NUMBER}-${env.BRANCH_NAME}/kernel_translated_folder"
            }
            stash includes: 'scripts/kernel_repo_upload/deb/**', name: 'deb_kernel_files'
            stash includes: 'scripts/kernel_repo_upload/rpm/**', name: 'rpm_kernel_files'
          }
    }
    stage('send_email') {
      withCredentials([string(credentialsId: 'MAIL_CONFIRMATION_LIST', variable: 'MAIL_CONFIRMATION_LIST')]) {
        checkout scm
        echo "Send email to the people that need to confirm the upload."
        emailext (
          subject: "Required upload confirmation for kernel version: ${env.KERNEL_TRANSLATED_FOLDER}",
          to: "${env.MAIL_CONFIRMATION_LIST}",
          mimeType : "text/html",
          body: """
              Hello,<br/><br/>
              Kernel version ${env.KERNEL_TRANSLATED_FOLDER} has been built.<br/>
              Please verify the results and confirm the publishing to the repo ${env.REPO_TYPE} at the following link:<br>
              <a href='${env.RUN_DISPLAY_URL}'>Confirm upload of ${env.KERNEL_TRANSLATED_FOLDER}</a><br/><br/>
              Thank you,<br/>Jenkins CI
          """
        )
      }
    }
    stage('confirm_kernel') {
        checkout scm
        echo "Ask for manual confirmation from the maintainer."
        timeout(time: 24, unit: 'HOURS') {
            input(message: "Are you sure you want to upload kernel folder ${KERNEL_TRANSLATED_FOLDER} to repo ${REPO_TYPE}?")
        }
    }
}

if (params.UPLOAD_TO_SKYPE) {
    node("hyper-v") {
        stage('upload_kernel_to_skype') {
          withCredentials([string(credentialsId: 'UPDATE_REPO_URL', variable: 'REPO_URL'),
                           string(credentialsId: 'REPO_API_KEY', variable: 'REPO_API_KEY'),
                           file(credentialsId: 'REPO_CERT', variable: 'REPO_CERT_PATH'),
                           ]) {
            cleanWs()
            checkout scm
            unstash 'deb_kernel_files'
            echo "Uploading kernel to repo ${env:REPO_URL}."
            PowerShellWrapper('''
              & "${env:WORKSPACE}\\scripts\\kernel_repo_upload\\upload_kernel_folder.ps1"
                  -KernelFolderPath "${env:WORKSPACE}\\scripts\\kernel_repo_upload\\deb"
                  -RepoType ${env:Repo_TYPE}
                  -RepoUrl ${env:REPO_URL}
                  -RepoApiKey ${env:REPO_API_KEY}
                  -RepoCertPath ${env:REPO_CERT_PATH}
            ''')
          }
        }
    }
}

if (params.UPLOAD_TO_LINKEDIN) {
    node("hyper-v") {
        stage('upload_kernel_to_linkedin') {
          withCredentials([string(credentialsId: 'LINKEDIN_REPO_URL', variable: 'LINKEDIN_REPO_URL'),
                           string(credentialsId: 'LINKEDIN_REPO_SASTOKEN', variable: 'LINKEDIN_REPO_SASTOKEN')
                           ]) {
            cleanWs()
            checkout scm
            echo "Uploading kernel to repo ${env:LINKEDIN_REPO_URL}."
            unstash 'rpm_kernel_files'
            PowerShellWrapper('''
              & "${env:WORKSPACE}\\scripts\\kernel_repo_upload\\upload_kernel_folder.ps1"
                  -KernelFolderPath "${env:WORKSPACE}\\scripts\\kernel_repo_upload\\rpm"
                  -RepoType ${env:Repo_TYPE}
                  -RepoUrl ${env:LINKEDIN_REPO_URL}
                  -SASToken "${env:LINKEDIN_REPO_SASTOKEN}"
            ''')
          }
        }
    }
}