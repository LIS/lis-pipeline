#!/usr/bin/env groovy

env.LISAV2_REMOTE = "https://github.com/lis/LISAv2.git"
env.LISAV2_BRANCH = "master"
env.LISAV2_RG_IDENTIFIER = "bisectk"

env.DISTRO_AZURE_UBUNTU_IMAGE_BIONIC = "Canonical UbuntuServer 18.04-DAILY-LTS latest"
env.DISTRO_AZURE_CENTOS_IMAGE_75 = "OpenLogic CentOS 7.5 latest"
env.DISTRO_TYPE = "deb"
env.DISTRO_PACKAGE_TYPE = "deb"
env.DISTRO_AZURE_IMAGE = env.DISTRO_AZURE_UBUNTU_IMAGE_BIONIC

env.LISAV2_FUNCTIONAL_BOOT_TEST = "BVT-CORE-VERIFY-LIS-MODULES"
env.LISAV2_AZURE_STRESS_TEST = "STRESSTEST-VERIFY-RESTART"
env.LISAV2_PERFORMANCE_TEST = "PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SYNTHETIC"
env.KERNEL_ARTIFACTS_PATH = "dev-patch-kernels"
env.KERNEL_BUILD_DIR = "/mnt/tmp/bisect-commit"
env.PARAM_SEPARATOR_STYLE = 'font-size: 15px; font-weight: 600;'

def runs = [:]

properties ([
    overrideIndexTriggers(false),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "KERNEL BUILD CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'ChoiceParameterDefinition',
            name: 'KERNEL_GIT_URL',
            choices: """git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git\nhttps://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git\nazure_kernel""",
            description: 'Kernel tree repo'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_GIT_BRANCH',
            defaultValue: 'master',
            description: 'Branch to be built'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_PATCH',
            defaultValue: "",
            description: 'Valid examples: \n scp://my-scp-hostname:/home/my-username/patch.p1 \n scp://my-username@my-scp-hostname:/home/my-username/patch.p1 \n http://my-website.com/patch.p1 \n Use the space separator for multiple patches.'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            name: 'BUILD_KERNEL_ARTIFACTS',
            description: 'Whether to build kernel artifacts. If this options is not selected, the builtin kernel will be tested.'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            name: 'PUBLISH_KERNEL_ARTIFACTS',
            description: 'Whether to publish built kernel artifacts. If this options is not selected, the built kernel packages will be published.'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_ARTIFACTS_SMB_PATH',
            defaultValue: "",
            description: 'The pre built kernel artifacts path from the share. Ex: linux-next/linux-next-4.20.0-e6c7317-28112018-unpatched-19. BUILD_KERNEL_ARTIFACTS step has to be unchecked for this option to become valid. If left empty, the builtin kernel will be tested.'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'ChoiceParameterDefinition',
            choices: 'Ubuntu_18.04.1\nCentOS_7.5',
            name: 'DISTRO_VERSION',
            description: 'Distro version to be tested.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """westus2\naustraliaeast\naustraliasoutheast\nbrazilsouth\ncanadacentral
                        canadaeast\ncentralindia\ncentralus\neastasia\neastus\neastus2\nfrancecentral
                        japaneast\njapanwest\nkoreacentral\nkoreasouth\nnorthcentralus\nnortheurope
                        southcentralus\nsoutheastasia\nsouthindia\nuksouth\nukwest\nwestcentralus
                        westeurope\nwestindia\nwestus\nsepremium""",
            name: 'LISAV2_AZURE_REGION',
            description: 'Azure Region'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "AZURE BOOT TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            name: 'RUN_AZURE_BOOT_TEST',
            description: 'Whether to run Azure Boot test'],
        [$class: 'ChoiceParameterDefinition',
            name: 'AZURE_BOOT_VM_SIZE',
            choices: "Standard_A2\nStandard_E64_v3\nStandard_F72s_v2",
            description: 'Azure Boot vm size'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "AZURE BOOT STRESS TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_AZURE_BOOT_STRESS_TEST',
            description: 'Whether to run Azure Boot Stress test'],
        [$class: 'StringParameterDefinition',
            name: 'AZURE_BOOT_STRESS_PROVISIONING_NUMBER',
            defaultValue: "3",
            description: 'Azure VM provisioning number (how many times to recreate the VM).'],
        [$class: 'StringParameterDefinition',
            name: 'AZURE_BOOT_STRESS_REBOOT_NUMBER',
            defaultValue: "10",
            description: 'Azure VM reboot number for each provisioning iteration. The total reboot number will be: AZURE_BOOT_STRESS_PROVISIONING_NUMBER * AZURE_BOOT_STRESS_REBOOT_NUMBER.'],
        [$class: 'ChoiceParameterDefinition',
            name: 'AZURE_BOOT_STRESS_VM_SIZE',
            choices: "Standard_A2\nStandard_E64_v3\nStandard_F72s_v2",
            description: 'Azure Boot Stress vm size'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "FUNCTIONAL TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'ChoiceParameterDefinition',
            choices: """NONE
                    Azure
                    HyperV""",
            name: 'FUNCTIONAL_TESTS_PLATFORM',
            description: 'On which platform to run LISAv2 functional tests.'],
        [$class: 'StringParameterDefinition',
            name: 'FUNCTIONAL_TESTS_NAME',
            defaultValue: "",
            description: 'LISAv2 test case name. Available options can be retrieved using LISAv2\\Utilities\\Get-LISAv2Statistics.ps1. If left empty, all the tests will be run.'],
        [$class: 'StringParameterDefinition',
            name: 'FUNCTIONAL_TESTS_CATEGORY',
            defaultValue: "BVT",
            description: 'LISAv2 test case category. Available options can be retrieved using LISAv2\\Utilities\\Get-LISAv2Statistics.ps1. If left empty, all the test categories will be run.'],
        [$class: 'StringParameterDefinition',
            name: 'FUNCTIONAL_TESTS_AREA',
            defaultValue: "",
            description: 'LISAv2 test case area. Available options can be retrieved using LISAv2\\Utilities\\Get-LISAv2Statistics.ps1. If left empty, all the test areas will be run.'],
        [$class: 'StringParameterDefinition',
            name: 'FUNCTIONAL_TESTS_TAG',
            defaultValue: "",
            description: 'LISAv2 test case tag. Available options can be retrieved using LISAv2\\Utilities\\Get-LISAv2Statistics.ps1. If left empty, all the test tags will be run.'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "AZURE PERFOMANCE TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'ChoiceParameterDefinition',
            choices: """NONE
                    STORAGE
                    NETWORK""",
            name: 'AZURE_PERF_TESTS',
            description: 'What Azure Performance tests to run. You can customize the test cases from the options below.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """4k
                    1024k""",
            name: 'AZURE_PERF_STORAGE_IO_SIZE',
            description: 'Azure Performance STORAGE IO SIZE.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """ALL
                    randread
                    randwrite
                    read
                    write""",
            name: 'AZURE_PERF_STORAGE_IO_MODE',
            description: 'Azure Performance STORAGE IO MODE.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """IPERF3_1CONNECTION
                    NTTTCP_TCP
                    NTTTCP_UDP""",
            name: 'AZURE_PERF_NETWORK_TEST_TYPE',
            description: 'Azure Performance Network testing type.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """SYNTHETIC
                    SRIOV""",
            name: 'NET_IPERF3_TYPE',
            description: 'Azure Performance NETWORK IPERF3 1CONNECTION: SYNTHETIC or SRIOV type.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """ALL
                    32\n64\n128\n256\n512\n1024\n2048\n4096\n8192\n16384\n32768\n65536""",
            name: 'NET_IPERF3_BUFFER_LENGTH',
            description: 'Azure Performance NETWORK IPERF3 1CONNECTION BUFFER LENGTH.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """SYNTHETIC
                    SRIOV""",
            name: 'NTTTCP_TCP_TYPE',
            description: 'Azure Performance NETWORK NTTTCP TCP: SYNTHETIC or SRIOV type.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """ALL
                    1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n1024\n2048\n4096\n6144\n8192\n10240""",
            name: 'NTTTCP_TCP_CONNECTIONS',
            description: 'Azure Performance NETWORK NTTTCP TCP number of connections.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """SYNTHETIC
                    SRIOV""",
            name: 'NTTTCP_UDP_TYPE',
            description: 'Azure Performance NETWORK NTTTCP UDP: SYNTHETIC or SRIOV type.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """ALL
                    2\n4\n8\n16\n32\n64\n128\n256\n512\n1024""",
            name: 'NTTTCP_UDP_CONNECTIONS',
            description: 'Azure Performance NETWORK NTTTCP UDP number of connections.'],
        [$class: 'StringParameterDefinition',
            name: 'CUSTOM_BUILD_TAG',
            defaultValue: "",
            description: 'Custom build tag for artifacts. If left undefined, BUILD_NUMBER will be used']
        ]
    ]
])

// ****************
// PIPELINE HELPERS
// ****************

def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def getVhdLocation(basePath, distroVersion) {
    def distroFamily = distroVersion.split('_')[0]
    return "${basePath}\\" + distroFamily + "\\" + distroVersion + "\\" + distroVersion + ".vhdx"
}

def prepareEnv(branch, remote) {
    cleanWs()
    git branch: branch, url: remote
}

def unstashKernel(kernelStash) {
    unstash kernelStash
    powershell """
        \$rmPath = "\${env:ProgramFiles}\\Git\\usr\\bin\\rm.exe"
        \$basePath = "./${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${kernelStash}/*/${env.DISTRO_PACKAGE_TYPE}"

        & \$rmPath -rf "\${basePath}/*dbg*"
        & \$rmPath -rf "\${basePath}/*devel*"
        & \$rmPath -rf "\${basePath}/*debug*"
    """
}
// buildKernel method is using params:
//     params.KERNEL_GIT_URL
//     params.KERNEL_GIT_BRANCH
//     params.KERNEL_PATCH
//     params.CUSTOM_BUILD_TAG
def buildKernel() {
    if (!params.CUSTOM_BUILD_TAG) {
        env.CUSTOM_BUILD_TAG = env.BUILD_NUMBER
    }
    withCredentials(bindings: [string(credentialsId: 'MSFT_KERNEL_GIT_URL', variable: 'MSFT_KERNEL_GIT_URL'),
                               string(credentialsId: 'SCP_USERNAME_DEFAULT', variable: 'SCP_USERNAME_DEFAULT')]) {
        sh '''#!/bin/bash
              set -xe -o pipefail
              if [[ "$KERNEL_GIT_URL" == "azure_kernel" ]]; then
                  KERNEL_GIT_URL=${MSFT_KERNEL_GIT_URL}
              fi
              echo "Building artifacts..."
              pushd "$WORKSPACE/scripts/package_building"
              echo ${KERNEL_PATCH} | tr ' ' '\n' > developer_patches
              i='0'
              IFS=$'\t\n'
              for url in $(cat developer_patches); do
                  i=$(( i + 1 ))
                  protocol=${url%%://*}
                  url=${url#*//}
                  test_user=${url%%*@*}
                  if [[ $protocol == "scp" ]] && [[ $test_user != "" ]]; then
                      sed -i "${i}s/.*/scp:\\/\\/$SCP_USERNAME_DEFAULT@${url//\\//\\\\/}/" developer_patches
                  fi
              done
              IFS=$' '
              bash build_artifacts.sh \\
                  --git_url "${KERNEL_GIT_URL}" \\
                  --git_branch "${KERNEL_GIT_BRANCH}" \\
                  --destination_path "${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}" \\
                  --install_deps "True" \\
                  --thread_number "x3" \\
                  --debian_os_version "16" \\
                  --build_path "${KERNEL_BUILD_DIR}" \\
                  --kernel_config "Microsoft/config-azure" \\
                  --clean_env "False" \\
                  --use_ccache "True" \\
                  --use_kernel_folder_prefix "True" \\
                  --patch_file "developer_patches" \\
                  --create_changelog "False" \\
                  --light_build "True" \\
                  --custom_build_tag="${CUSTOM_BUILD_TAG}"
              popd
              '''
    }
    sh '''#!/bin/bash
      echo ${BUILD_NUMBER}-$(crudini --get scripts/package_building/kernel_versions.ini KERNEL_BUILT folder) > ./build_name
    '''
    script {
      currentBuild.displayName = readFile "./build_name"
    }
    stash includes: 'scripts/package_building/kernel_versions.ini', name: 'kernel_version_ini'
    dir ("scripts/package_building") {
        stash includes: "${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/${env.DISTRO_PACKAGE_TYPE}/**", name: env.KERNEL_ARTIFACTS_PATH
    }
    sh '''
        set -xe
        rm -rf "scripts/package_building/${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}"
        '''
    archiveArtifacts 'scripts/package_building/kernel_versions.ini'
}


def runLisa(platform, secrets, testName, testCategory, testArea, testTag, customTestParams, testIterations) {
    def customKernel = ""
    def osVHD = ""
    def region = params.LISAV2_AZURE_REGION
    def vmSize = ""
    def customTestIterations = ""

    prepareEnv(env.LISAV2_BRANCH, env.LISAV2_REMOTE)
    try {
        unstashKernel(env.KERNEL_ARTIFACTS_PATH)
        customKernel = "-CustomKernel 'localfile:./${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/*/${env.DISTRO_PACKAGE_TYPE}/*.${env.DISTRO_PACKAGE_TYPE}'"
    } catch (Exception e) {
        echo "No stash ${env.KERNEL_ARTIFACTS_PATH} found"
    }

    if (testName.equals(env.LISAV2_AZURE_STRESS_TEST)) {
        vmSize = "-OverrideVMSize '${params.AZURE_BOOT_STRESS_VM_SIZE}'"
    }
    if (testName.equals(env.LISAV2_FUNCTIONAL_BOOT_TEST)) {
        vmSize = "-OverrideVMSize '${params.AZURE_BOOT_VM_SIZE}'"
    }
    if (platform.equals('HyperV')) {
        region = "localhost"
        if (testName.equals(env.LISAV2_PERFORMANCE_TEST)) {
            region = "localhost," + env.HYPERV_SECOND_PERF_NODE
        }
        osVHD = "-OsVHD '" + getVhdLocation(env.LISAV2_IMAGES_SHARE_URL, params.DISTRO_VERSION) + "'"
    }

    if (testIterations) {
        customTestIterations = " -DeployVMPerEachTest -TestIterations " + testIterations
    }

    RunPowershellCommand(".\\Run-LisaV2.ps1" +
        " -TestLocation '${region}'" +
        " -RGIdentifier '${env.LISAV2_RG_IDENTIFIER}'" +
        " -TestPlatform '${platform}'" +
        " ${vmSize}" +
        " -ARMImageName '${env.DISTRO_AZURE_IMAGE}'" +
        " ${osVHD}" +
        " ${customKernel}" +
        "${customTestIterations}" +
        " -TestNames '${testName}'" +
        " -TestCategory '${testCategory}'" +
        " -TestArea '${testArea}'" +
        " -TestTag '${testTag}'" +
        " -CustomParameters '${customTestParams}'" +
        " -StorageAccount 'ExistingStorage_Standard'" +
        " -ForceDeleteResources" +
        " -XMLSecretFile '${secrets}'"

    )
}


def publishArtifacts() {
    dir("${env.KERNEL_ARTIFACTS_PATH}${env.BUILD_NUMBER}${env.BRANCH_NAME}") {
        unstash "${env.KERNEL_ARTIFACTS_PATH}"
        withCredentials([string(credentialsId: 'MSFT_KERNEL_GIT_URL', variable: 'MSFT_KERNEL_GIT_URL'),
                         string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                                usernamePassword(credentialsId: 'smb_share_user_pass',
                                passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')
                        ]) {
            sh '''#!/bin/bash
                set -xe
                if [[ "$KERNEL_GIT_URL" == "azure_kernel" ]]; then
                    KERNEL_GIT_URL=${MSFT_KERNEL_GIT_URL}
                fi
                folder_prefix="${KERNEL_GIT_URL##*/}"
                folder_prefix="${folder_prefix%.*}"
                mkdir -p "scripts/package_building"
                mv "${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}" "scripts/package_building/"
                bash "${WORKSPACE}/scripts/utils/publish_artifacts_to_smb.sh" \\
                    --build_number "${BUILD_NUMBER}-${BRANCH_NAME}" \\
                    --smb_url "${SMB_SHARE_URL}/${folder_prefix}" --smb_username "${USERNAME}" \\
                    --smb_password "${PASSWORD}" --artifacts_path "${KERNEL_ARTIFACTS_PATH}" \\
                    --artifacts_folder_prefix "${folder_prefix}"
                '''
        }
    }
}

def publishTempArtifacts() {
    dir("${env.KERNEL_ARTIFACTS_PATH}${env.BUILD_NUMBER}${env.BRANCH_NAME}") {
        unstash "${env.KERNEL_ARTIFACTS_PATH}"
        withCredentials([string(credentialsId: 'MSFT_KERNEL_GIT_URL', variable: 'MSFT_KERNEL_GIT_URL'),
                         string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                            usernamePassword(credentialsId: 'smb_share_user_pass',
                                        passwordVariable: 'PASSWORD',
                                        usernameVariable: 'USERNAME')]) {
            sh '''#!/bin/bash
                set -xe
                if [[ "$KERNEL_GIT_URL" == "azure_kernel" ]]; then
                    KERNEL_GIT_URL=${MSFT_KERNEL_GIT_URL}
                fi
                folder_prefix="${KERNEL_GIT_URL##*/}"
                folder_prefix="${folder_prefix%.*}"
                mkdir -p "scripts/package_building"
                mv "${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}" "scripts/package_building/"
                bash "${WORKSPACE}/scripts/utils/publish_artifacts_to_smb.sh" \\
                    --build_number "${BUILD_NUMBER}-${BRANCH_NAME}" \\
                    --smb_url "${SMB_SHARE_URL}/temp-kernel-artifacts" --smb_username "${USERNAME}" \\
                    --smb_password "${PASSWORD}" --artifacts_path "${KERNEL_ARTIFACTS_PATH}" \\
                    --artifacts_folder_prefix "${folder_prefix}"
                '''
        }
    }
}

def stashArtifacts() {
    sh '''#!/bin/bash
        set -xe -o pipefail
        kernel_dir="${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}"
        mkdir -p "${kernel_dir}"
        cp -r "/mnt/kernels/${KERNEL_ARTIFACTS_SMB_PATH}" "${kernel_dir}"
    '''
    stash excludes: "${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/${env.DISTRO_PACKAGE_TYPE}/*dbg*", includes: "${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/${env.DISTRO_PACKAGE_TYPE}/**", name: env.KERNEL_ARTIFACTS_PATH
    cleanWs()
}

def getPerfTestInfo(perfType, netType, netIperfType, netIperfBufferLength, storIoSize, storIoMode, netNtttcpTcpType, netNtttcpTcpConnections, netNtttcpUdpType, netNtttcpUdpConnections) {
    def perfTestInfo = [ "test_case_name": 'NONE', "test_case_params": '']
    perfType = perfType.trim()
    netType = netType.trim()
    netIperfType = netIperfType.trim()
    netIperfBufferLength = netIperfBufferLength.trim()
    storIoSize = storIoSize.trim()
    storIoMode = storIoMode.trim()
    netNtttcpTcpType = netNtttcpTcpType.trim()
    netNtttcpTcpConnections = netNtttcpTcpConnections.trim()
    netNtttcpUdpType = netNtttcpUdpType.trim()
    netNtttcpUdpConnections = netNtttcpUdpConnections.trim()

    // LISAV2 TEST CASE INFORMATION
    def netIperfUSriovTestCase = "PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SRIOV"
    def netIperfSyntTestCase = "PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SYNTHETIC"
    def netIperfSriovBufferLengthParam = "PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SRIOV-BUFFER-LENGTHS"
    def netIperfSyntBufferLengthParam = "PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SYNTHETIC-BUFFER-LENGTHS"

    def storIo4KTestCase = "PERF-STORAGE-4K-IO"
    def storIo1024KTestCase = "PERF-STORAGE-1024K-IO"
    def storIo4kParam = "PERF-STORAGE-4K-IO-MODES"
    def storIo1024kParam = "PERF-STORAGE-1024K-IO-MODES"

    def netNtttcpTcpSyntTestCase = "PERF-NETWORK-TCP-THROUGHPUT-MULTICONNECTION-NTTTCP-Synthetic"
    def netNtttcpTcpSriovTestCase = "PERF-NETWORK-TCP-THROUGHPUT-MULTICONNECTION-NTTTCP-SRIOV"
    def netNtttcpTcpConnectionsParam = "NTTTCP_TCP_CONNECTIONS"

    def netNtttcpUdpSyntTestCase = "PERF-NETWORK-UDP-1K-THROUGHPUT-MULTICONNECTION-NTTTCP-Synthetic"
    def netNtttcpUdpSriovTestCase = "PERF-NETWORK-UDP-1K-THROUGHPUT-MULTICONNECTION-NTTTCP-SRIOV"
    def netNtttcpUdpConnectionsParam = "NTTTCP_UDP_CONNECTIONS"


    switch (perfType) {
        case "STORAGE":
            switch (storIoSize) {
                case "4k":
                    perfTestInfo["test_case_name"] = storIo4KTestCase
                    storIoParam = storIo4kParam
                    break;
                case "1024k":
                    perfTestInfo["test_case_name"] = storIo1024KTestCase
                    storIoParam = storIo1024kParam
                    break;
                default:
                    echo "STORAGE perf tests are not implemented."
                    break;
            }
            if (storIoMode && !storIoMode.equals("ALL")) {
                perfTestInfo["test_case_params"] = storIoParam + "=" + storIoMode
            }
            break
        case "NETWORK":
            switch (netType) {
                case "IPERF3_1CONNECTION":
                    if (netIperfType.equals("SYNTHETIC")) {
                        perfTestInfo["test_case_name"] = netIperfSyntTestCase
                        netIperfBufferLengthParam = netIperfSyntBufferLengthParam
                    }
                    if (netIperfType.equals("SRIOV")) {
                        perfTestInfo["test_case_name"] = netIperfUSriovTestCase
                        netIperfBufferLengthParam = netIperfSriovBufferLengthParam
                    }
                    if (netIperfBufferLength && !netIperfBufferLength.equals("ALL")) {
                       perfTestInfo["test_case_params"] = netIperfBufferLengthParam + "=(" + netIperfBufferLength + ")"
                    }
                    break;
                case "NTTTCP_TCP":
                    if (netNtttcpTcpType.equals("SYNTHETIC")) {
                        perfTestInfo["test_case_name"] = netNtttcpTcpSyntTestCase
                    }
                    if (netNtttcpTcpType.equals("SRIOV")) {
                        perfTestInfo["test_case_name"] = netNtttcpTcpSriovTestCase
                    }
                    if (netNtttcpTcpConnections && !netNtttcpTcpConnections.equals("ALL")) {
                       perfTestInfo["test_case_params"] = netNtttcpTcpConnectionsParam + "=(" + netNtttcpTcpConnections + ")"
                    }
                    break;
                case "NTTTCP_UDP":
                    if (netNtttcpUdpType.equals("SYNTHETIC")) {
                        perfTestInfo["test_case_name"] = netNtttcpUdpSyntTestCase
                    }
                    if (netNtttcpUdpType.equals("SRIOV")) {
                        perfTestInfo["test_case_name"] = netNtttcpUdpSriovTestCase
                    }
                    if (netNtttcpUdpConnections && !netNtttcpUdpConnections.equals("ALL")) {
                       perfTestInfo["test_case_params"] = netNtttcpUdpConnectionsParam + "=(" + netNtttcpUdpConnections + ")"
                    }
                    break;
                default:
                    echo "NETWORK ${netType} perf tests are not implemented."
                    break
            }
            break
        default:
            echo "${perfType} perf tests are not implemented."
            break
    }
    return perfTestInfo
}

// **************
// PIPELINE LOGIC
// **************

if (params.RUN_AZURE_BOOT_TEST) {
    runs['azure_boot'] = {
        node ("azure") {
            stage ("azure_boot") {
                try {
                    echo "Running Azure Boot test"
                    withCredentials(bindings: [
                      file(credentialsId: 'Azure_Secrets_File',
                           variable: 'Azure_Secrets_File')
                    ]) {
                        runLisa('Azure', env.Azure_Secrets_File, env.LISAV2_FUNCTIONAL_BOOT_TEST, '', '', '', '', '')
                    }
                } catch (Exception e) {
                    echo e.toString()
                    echo "Failed to run Azure Boot test"
                    currentBuild.result = 'FAILURE'
                } finally {
                    junit "Report\\*-junit.xml"
                    powershell "Move-Item -Force Report\\*-junit.xml Report\\AZURE_BOOT_TEST.xml"
                    archiveArtifacts "Report\\AZURE_BOOT_TEST.xml"
                    archiveArtifacts "TestResults\\**\\*"
                }
            }
        }
    }
}

if (params.RUN_AZURE_BOOT_STRESS_TEST) {
    def customBootStressParams = "STRESS_REBOOT_NUMBER=" + params.AZURE_BOOT_STRESS_REBOOT_NUMBER
    runs['azure_boot_stress'] = {
        node ("azure") {
            stage ("azure_boot_stress") {
                try {
                    echo "Running Azure Boot Stress tests"
                    withCredentials(bindings: [
                      file(credentialsId: 'Azure_Secrets_File',
                           variable: 'Azure_Secrets_File')
                    ]) {
                        runLisa('Azure', env.Azure_Secrets_File, env.LISAV2_AZURE_STRESS_TEST, '', '', '', customBootStressParams, params.AZURE_BOOT_STRESS_PROVISIONING_NUMBER)
                    }
                } catch (Exception e) {
                    echo e.toString()
                    echo "Failed to run Azure Boot Stress test"
                    currentBuild.result = 'FAILURE'
                } finally {
                    junit "Report\\*-junit.xml"
                    powershell "Move-Item -Force Report\\*-junit.xml Report\\AZURE_BOOT_STRESS_TEST.xml"
                    archiveArtifacts "Report\\AZURE_BOOT_STRESS_TEST.xml"
                    archiveArtifacts "TestResults\\**\\*"
                }
            }
        }
    }
}

if (params.FUNCTIONAL_TESTS_PLATFORM && !params.FUNCTIONAL_TESTS_PLATFORM.equals('NONE')) {
    def functionPlatform = params.FUNCTIONAL_TESTS_PLATFORM.trim()
    def functionalStage = functionPlatform.toLowerCase() + '_fvt'
    runs[functionalStage] = {
        node (functionPlatform.toLowerCase()) {
            stage (functionalStage) {
                try {
                    echo "Running functional tests"
                    withCredentials(bindings: [
                      file(credentialsId: 'Azure_Secrets_File',
                           variable: 'Azure_Secrets_File'),
                      string(credentialsId: 'LISAV2_IMAGES_SHARE_URL',
                             variable: 'LISAV2_IMAGES_SHARE_URL')
                    ]) {
                        runLisa(functionPlatform, env.Azure_Secrets_File, params.FUNCTIONAL_TESTS_NAME, params.FUNCTIONAL_TESTS_CATEGORY, params.FUNCTIONAL_TESTS_AREA, params.FUNCTIONAL_TESTS_TAG, '', '')
                    }
                } catch (Exception e) {
                    echo e.toString()
                    echo "Failed to run functional tests"
                    currentBuild.result = 'FAILURE'
                } finally {
                    junit "Report\\*-junit.xml"
                    powershell "Move-Item -Force Report\\*-junit.xml Report\\LISAV2_FUNCTIONAL_TESTS.xml"
                    archiveArtifacts "Report\\LISAV2_FUNCTIONAL_TESTS.xml"
                    archiveArtifacts "TestResults\\**\\*"
                }
            }
        }
    }
}

if (params.AZURE_PERF_TESTS && !params.AZURE_PERF_TESTS.equals('NONE')) {
    def perfTestInfo = getPerfTestInfo(params.AZURE_PERF_TESTS, params.AZURE_PERF_NETWORK_TEST_TYPE, params.NET_IPERF3_TYPE, params.NET_IPERF3_BUFFER_LENGTH, params.AZURE_PERF_STORAGE_IO_SIZE, params.AZURE_PERF_STORAGE_IO_MODE, params.NTTTCP_TCP_TYPE, params.NTTTCP_TCP_CONNECTIONS, params.NTTTCP_UDP_TYPE, params.NTTTCP_UDP_CONNECTIONS)
    if (!perfTestInfo["test_case_name"].equals("NONE")) {
            runs['azure_perf'] = {
            node ("azure") {
                stage ("azure_perf") {
                    try {
                        echo "Running Azure performance tests"
                        withCredentials(bindings: [
                          file(credentialsId: 'Azure_Secrets_File',
                               variable: 'Azure_Secrets_File')
                        ]) {
                            runLisa('Azure', env.Azure_Secrets_File, perfTestInfo["test_case_name"], '', '', '', perfTestInfo['test_case_params'], '')
                        }
                    } catch (Exception e) {
                        echo e.toString()
                        echo "Failed to run Azure performance tests"
                        currentBuild.result = 'FAILURE'
                    } finally {
                        junit "Report\\*-junit.xml"
                        powershell 'ls -Recurse TestResults\\** | Where-Object {$_.Name -like "*_perf_results.json"} | ForEach-Object {Copy-Item $_ "Report\\AZURE_PERF_TESTSSUITE$($_.Name)"}'
                        powershell "Move-Item -Force Report\\*-junit.xml Report\\AZURE_PERF_TESTS.xml"
                        archiveArtifacts "Report\\AZURE_PERF_TESTS*"
                        archiveArtifacts "TestResults\\**\\*"
                    }
                }
            }
        }
    }
}

// *************
// PIPELINE MAIN
// *************


if (params.DISTRO_VERSION.toLowerCase().contains("centos")) {
    env.DISTRO_TYPE = "rhel"
    env.DISTRO_PACKAGE_TYPE = "rpm"
    env.DISTRO_AZURE_IMAGE = env.DISTRO_AZURE_CENTOS_IMAGE_75
}

if (params.BUILD_KERNEL_ARTIFACTS) {
    node (env.DISTRO_TYPE + "_kernel_builder") {
        stage (env.DISTRO_TYPE + "_kernel_build") {
            checkout scm
            buildKernel()
        }
    }
    if (params.PUBLISH_KERNEL_ARTIFACTS && !currentBuild.result.equals('FAILURE')) {
        node ("meta_slave") {
            stage ("publish_temp_artifacts") {
                checkout scm
                publishTempArtifacts()
            }
        }
    }
} else {
    if (params.KERNEL_ARTIFACTS_SMB_PATH) {
        node ("meta_slave") {
            stage ("stash_artifacts") {
                stashArtifacts()
            }
        }
    }
}

stage("validation_stage") {
    parallel runs
}

if (params.PUBLISH_KERNEL_ARTIFACTS && params.BUILD_KERNEL_ARTIFACTS && !currentBuild.result.equals('FAILURE')) {
    def publishArtifactsRetries = 0
    def publishArtifactsMaxRetries = 3
    def publishArtifactsSuccess = false
    while (!publishArtifactsSuccess && publishArtifactsRetries < publishArtifactsMaxRetries) {
        try {
            node ("meta_slave") {
                stage ("publish_artifacts" + publishArtifactsRetries) {
                    checkout scm
                    publishArtifacts()
                }
            }
            publishArtifactsSuccess = true
        } catch (Exception e) {
            publishArtifactsRetries++
            echo e.toString()
            echo "Retrying publish artifacts stage."
        }
    }
}
