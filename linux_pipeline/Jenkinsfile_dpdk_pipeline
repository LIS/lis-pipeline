#!/usr/bin/env groovy

properties ([
    pipelineTriggers([cron('H 1 * * *')]),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'StringParameterDefinition',
            name: 'AZURE_IMAGES',
            defaultValue: 'Canonical UbuntuServer 16.04-LTS latest,Canonical UbuntuServer 18.04-DAILY-LTS latest,RedHat RHEL 7-RAW latest,RedHat RHEL 7.5 latest,Openlogic CentOS 7.5 latest,SUSE SLES 15 latest',
            description: 'Azure images to be tested, comma separated.'],
        [$class: 'StringParameterDefinition',
            name: 'TEST_CASE',
            defaultValue: "VERIFY-DPDK-FAILSAFE-DURING-TRAFFIC,VERIFY-DPDK-BUILD-AND-TESTPMD-TEST,VERIFY-SRIOV-FAILSAFE-FOR-DPDK,VERIFY-DPDK-COMPLIANCE,VERIFY-DPDK-OVS,VERIFY-DPDK-RING-LATENCY,PERF-DPDK-FWD-PPS-DS15,PERF-DPDK-SINGLE-CORE-PPS-DS4,PERF-DPDK-SINGLE-CORE-PPS-DS15,PERF-DPDK-MULTICORE-PPS-DS15,PERF-DPDK-MULTICORE-PPS-F32",
            description: 'DPDK test cases to be run, comma separated. If set to empty, all the DPDK tests will be run.'],
        [$class: 'StringParameterDefinition',
            name: 'AZURE_REGION',
            defaultValue: 'westus2',
            description: 'Azure region for the test runs'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'dpdk\ndpdk-core\ndpdk-community',
            name: 'TEST_TAG',
            description: 'DPDK test case tag. "dpdk" -> all tests will be run. "dpdk-core" -> testpmd/ring-latency based will be run. "dpdk-community" -> tests like OVS/VPP/NFF-GO will be run. .'],
        [$class: 'StringParameterDefinition',
            name: 'DPDK_SOURCE',
            defaultValue: '',
            description: 'If set, the DPDK source will be used and the latest tag check will not be performed. Examples: git://dpdk.org/next/dpdk-next-net , https://fast.dpdk.org/rel/dpdk-18.11.tar.xz'],
        [$class: 'StringParameterDefinition',
            name: 'CUSTOM_LIS_SOURCE',
            defaultValue: '',
            description: 'If set, the LIS drivers will be installed: Example: http://download.microsoft.com/download/6/8/F/68FE11B8-FAA4-4F8D-8C7D-74DA7F2CFC8C/lis-rpms-4.3.0.tar.gz']
        ]
    ]
])

def reportPipelineStatus(status) {
    println "Pipeline report for status: ${status}"

    env.COMPOSITE_KEYS = "PipelineName,PipelineBuildNumber"
    withCredentials(bindings: [file(credentialsId: 'DPDK_PIPELINE_EXECUTION_DB_CREDS',
        variable: 'DPDK_PIPELINE_EXECUTION_DB_CREDS')]) {
        dir('dpdk_pi_rep' + env.BUILD_NUMBER + env.BRANCH_NAME) {
            sh '''#!/bin/bash
                cat << EOF > "${WORKSPACE}/scripts/reporting/db_rows_${BRANCH_NAME}_${BUILD_NUMBER}.json"
[{  "StartDate": "${START_DATE}",
    "EndDate": "${END_DATE}",
    "PipelineName": "${JOB_NAME}",
    "PipelineBuildNumber": ${BUILD_NUMBER},
    "PipelineBuildUrl": "${BUILD_URL}",
    "DpdkVersions": "${DPDK_VERSIONS}",
    "LisVersion": "${CUSTOM_LIS_SOURCE}",
    "SignedOffBy": "${SIGNED_OFF_BY}",
    "SignedOffResult": "${SIGNED_OFF_RESULT}"
}]
EOF
                python "${WORKSPACE}/scripts/reporting/report_pipeline_stage_status.py" \
                --db_rows "${WORKSPACE}/scripts/reporting/db_rows_${BRANCH_NAME}_${BUILD_NUMBER}.json" \
                --composite_keys "${COMPOSITE_KEYS}" \
                --db_config "${DPDK_PIPELINE_EXECUTION_DB_CREDS}"
            '''
        }
    }
}

def reportStageStatus(stageInfo) {
    env.stageName = stageInfo["Name"]
    env.startDate = stageInfo["StartDate"]
    env.endDate = stageInfo["EndDate"]
    env.dpdkVersion = stageInfo["dpdkVersion"]
    env.distroVersion = stageInfo["distroVersion"]

    env.MASTER_COMPOSITE_KEYS = "PipelineName,PipelineBuildNumber"
    env.COMPOSITE_KEYS = "StageName"
    env.FOREIGN_KEY = "DpdkPipelineExecutionId"
    stage ("report_stage") {
        node ("meta_slave") {

            withCredentials(bindings: [file(credentialsId: 'DPDK_PIPELINE_EXECUTION_STAGE_DB_CREDS',
                variable: 'DPDK_PIPELINE_EXECUTION_STAGE_DB_CREDS')]) {
                checkout scm
                sh '''#!/bin/bash
        cat << EOF > "${WORKSPACE}/scripts/reporting/db_rows${stageName}${BUILD_NUMBER}${BRANCH_NAME}.json"
[{  "StageName": "${stageName}",
"StartDate": "${startDate}",
"EndDate": "${endDate}",
"TestsPassed": "${passCount}",
"TestsAborted": "${abortCount}",
"TestsFailed": "${failCount}",
"TestsSkipped": "${skippedCount}",
"PipelineName": "${JOB_NAME}",
"PipelineBuildNumber": ${BUILD_NUMBER},
"DistroVersion": "${distroVersion}",
"DpdkVersion": "${dpdkVersion}"
}]
EOF
            python "${WORKSPACE}/scripts/reporting/report_pipeline_stage_status.py" \
                --db_rows "${WORKSPACE}/scripts/reporting/db_rows${stageName}${BUILD_NUMBER}${BRANCH_NAME}.json" \
                --composite_keys "${COMPOSITE_KEYS}" \
                --foreign_key "${FOREIGN_KEY}" \
                --master_composite_keys "${MASTER_COMPOSITE_KEYS}" \
                --db_config "${DPDK_PIPELINE_EXECUTION_STAGE_DB_CREDS}"
            '''
            }
        }
    }
}


def lisav2RemoteUrl = "https://github.com/lis/LISAv2.git"
def lisav2BranchName = "master"

env.DPDK_REMOTE_URL = "git://git.dpdk.org/dpdk"
env.DPDK_STABLE_REMOTE_URL = "git://git.dpdk.org/dpdk-stable"
env.BUILD_TAGS_LATEST = ""
env.BUILD_TAGS_STABLE = ""
env.UTILS_PATH = "linux_pipeline/utils/pipeline_utils.groovy"
env.DPDK_VERSIONS = ""
env.START_DATE = new java.sql.Timestamp(new Date().getTime())
env.END_DATE = ""
env.SIGNED_OFF_BY = ""
env.SIGNED_OFF_RESULT = ""

def azureImages = env.AZURE_IMAGES.split(",")
def azureRegion = env.AZURE_REGION.trim()
def testCases = env.TEST_CASE.trim()
def testCaseTag = env.TEST_TAG.trim()
def dpdkSource = []

if (!azureImages || !azureRegion || !testCases || !testCaseTag) {
  throw 'Failed to validate the pipeline parameters'
}

stages = [:]
dpdkTags = ""

if (!DPDK_SOURCE || DPDK_SOURCE == "") {
    node('meta_slave') {
        stage("check_new_tags") {
            dir ("dpdk-new-tags-checker-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                checkout scm
                sh '''
                    #!/bin/bash
                    bash ./scripts/package_building/check_latest_tags.sh \\
                        --work_dir "./" \\
                        --kernel_tree "$DPDK_REMOTE_URL" \\
                        --results "./latest_tags.txt" \\
                        --exclude_versions "False"
                '''
                sh '''
                    #!/bin/bash
                    bash ./scripts/package_building/check_latest_tags.sh \\
                        --work_dir "./" \\
                        --kernel_tree "$DPDK_STABLE_REMOTE_URL" \\
                        --results "./stable_tags.txt" \\
                        --exclude_versions "False"
                '''
                env.BUILD_TAGS_LATEST = readFile ("latest_tags.txt")
                env.BUILD_TAGS_STABLE = readFile ("stable_tags.txt")
            }
            cleanWs()
        }
    }
}

if (env.BUILD_TAGS_LATEST && env.BUILD_TAGS_LATEST != "") {
    env.BUILD_TAGS_LATEST.eachLine {
        dpdkSource.add([it, 'latest'])
    }
}
if (env.BUILD_TAGS_STABLE && env.BUILD_TAGS_STABLE != "") {
    env.BUILD_TAGS_STABLE.eachLine {
        dpdkSource.add([it, 'stable'])
    }
}

if (DPDK_SOURCE && DPDK_SOURCE != "") {
    dpdkSource = [[DPDK_SOURCE, '']]
}

if (dpdkSource.size()) {
    dpdkSource.each {
        def currentTag = it[0]
        def currentTagAzureId = ""
        def dpdkSourceUrl = it[0]

        if (!DPDK_SOURCE || DPDK_SOURCE == "") {
            currentTag = it[0].replace("refs/tags/", "")
            currentTagAzureId = "-" + currentTag.replace("-", "").replace(".","").replace("_","")
            dpdkSourceUrl = "https://git.dpdk.org/dpdk/snapshot/dpdk-${currentTag}.tar.gz"
            if (it && it[1] && it[1] == "stable") {
                dpdkSourceUrl = "https://git.dpdk.org/dpdk-stable/snapshot/dpdk-stable-${currentTag}.tar.gz"
            }
        }

        dpdkTags += "${currentTag}, "
        env.DPDK_VERSIONS = dpdkTags.replace(", "," ").trim()
        azureImages.each {
            def currentImage = it
            def stageName = "${currentImage}-${currentTag}"
            stages[stageName] = {
                try {
                    timeout (3600) {
                        node('azure') {
                            def stageInfo = [:]
                            stageInfo["Name"] = stageName
                            stageInfo["StartDate"] = new java.sql.Timestamp(new Date().getTime()).toString()
                            stageInfo["EndDate"] = ''
                            stageInfo["distroVersion"] = currentImage
                            stageInfo["dpdkVersion"] = currentTag
                            cleanWs()
                            checkout scm
                            try {
                                lock ('db_reporting') {
                                    reportStageStatus(stageInfo)
                                }
                            } catch (exc) {
                                println exc
                            }
                            def utils = load(env.UTILS_PATH)
                            withCredentials([file(credentialsId: 'Azure_Secrets_TESTONLY_File',
                                             variable: 'Azure_Secrets_File')]) {
                                echo "Current Image: ${currentImage}, Current Region: ${azureRegion}"
                                git branch: lisav2BranchName, url: lisav2RemoteUrl
                                utils.RunPowershellCommand(".\\Run-LisaV2.ps1" +
                                " -TestLocation '${azureRegion}'" +
                                " -RGIdentifier 'dpdkp${currentTagAzureId}'" +
                                " -TestPlatform  'Azure'" +
                                " -ARMImageName '${currentImage}'" +
                                " -TestNames '${TEST_CASE}'" +
                                " -TestTag '${TEST_TAG}'" +
                                " -ResultDBTestTag 'DAILY-FUNCTIONAL'"+
                                " -ResultDBTable 'Perf_DPDK_TestPmd'"+
                                " -CustomLIS '${CUSTOM_LIS_SOURCE}'" +
                                " -StorageAccount 'ExistingStorage_Standard'" +
                                " -XMLSecretFile '${Azure_Secrets_File}'" +
                                " -CustomTestParameters 'DPDK_SOURCE_URL=${dpdkSourceUrl}'" +
                                " -ResourceCleanup Delete" +
                                " -EnableTelemetry" +
                                " -DeployVMPerEachTest" +
                                " -ExitWithZero"
                                )
                                archiveArtifacts artifacts: '*-TestLogs.zip', allowEmptyArchive: true
                                junit testResults: "Report\\*-junit.xml", allowEmptyResults: true
                                def stashName = (currentTag + currentImage).replace("/","").replace(":","").replace(".","")
                                stash name: stashName, includes: "Report\\*-junit.xml", allowEmpty: true
                            }
                            stageInfo["EndDate"] = new java.sql.Timestamp(new Date().getTime()).toString()
                            try {
                                lock ('db_reporting') {
                                    env.passCount = utils.GetTestResults("pass").trim()
                                    env.abortCount = utils.GetTestResults("abort").trim()
                                    env.failCount = utils.GetTestResults("fail").trim()
                                    env.skippedCount = utils.GetTestResults("skipped").trim()
                                    reportStageStatus(stageInfo)
                                    env.passCount = ''
                                    env.abortCount = ''
                                    env.failCount = ''
                                    env.skippedCount = ''
                                }
                            } catch (exc) {
                                println exc
                            }
                        }
                    }
                } catch (exc) {
                    println(exc)
                    println "${currentImage}: STAGE_FAILED_EXCEPTION."
                    currentBuild.result = 'FAILURE'
                } finally {
                    echo "Cleaning up environment"
                }
            }
        }
    }
    stage ("report_status_init") {
        node ("meta_slave") {
            checkout scm
            try {
                reportPipelineStatus("init")
            } catch (exc) {
                println exc
            }
        }
    }
    stage('validation') {
        parallel stages
    }

    node('meta_slave') {
        def dpdkTagsFormatted = dpdkTags.replace(", "," ").trim()
        stage("send_mail") {
            checkout scm
            withCredentials([string(credentialsId: 'DPDK_MAILING_LIST',
                                  variable: 'DPDK_MAILING_LIST')]) {
                def mailList = null
                def utils = load(env.UTILS_PATH)
                if (utils.isJobCronTriggered()) {
                    mailList = DPDK_MAILING_LIST
                }
                def emailBody = readFile "./scripts/dpdk/dpdk-email-groovy-text.template"
                emailBody = emailBody.replace("DPDK_VERSION", dpdkTagsFormatted)
                emailBody = emailBody.replace("AZURE_IMAGE", azureImages.join(", "))
                def testResults = "\n DPDK job exited with status: ${currentBuild.currentResult} - ${env.BUILD_URL}. \n"
                azureImages.each {
                    def currentImage = it
                    dpdkTags.trim().replace(", "," ").split(" ").each() {
                        def dpdkVersion = it.trim().replace(",","")
                        def stashName = (dpdkVersion + currentImage).replace("/","").replace(":","").replace(".","")
                        try {
                            unstash stashName
                            def junitFiles = findFiles glob: "Report/*-junit.xml"
                            if (junitFiles) {
                                def junitFile = junitFiles[0].path
                                def junitResult = readFile junitFile
                                def response = new XmlSlurper().parseText(junitResult)
                                def testResult = ""
                                response.testsuite.testcase.each{
                                    def tcName = it.@name.text()
                                    def tcStatusFailure = it.failure
                                    def tcStatusError = it.error
                                    def tcStatusSkipped = it.skipped
                                    def tcStatus = "PASSED"
                                    if (tcStatusFailure.size()) {
                                        tcStatus = "FAILED"
                                    }
                                    if (tcStatusError.size()) {
                                        tcStatus = "ABORTED"
                                    }
                                    if (tcStatusSkipped.size()) {
                                        tcStatus = "SKIPPED"
                                    }
                                    testResult += "* ${tcName}: ${tcStatus} \n"
                                }
                                if (testResult != "") {
                                    testResults += "\nTest results for DPDK '${dpdkVersion}' and Azure image: '${currentImage}': \n \n"
                                    testResults += testResult
                                } else {
                                    testResults += "\nThere are no test results for DPDK '${dpdkVersion}' and Azure image: '${currentImage}'. Please check the Jenkins job."
                                }
                                sh "rm -f '${junitFile}'"
                            } else {
                                println "No stashed results for stash ${stashName}"
                                testResults += "\nThere are no test results for Azure image: '${currentImage}'. Please check the Jenkins job."
                            }
                        } catch (exc) {
                            println(exc)
                        }
                    }
                }
                emailBody = emailBody.replace("TEST_RESULTS", testResults)
                emailext (
                    subject: "DPDK validation results for ${dpdkTagsFormatted}",
                    body: emailBody,
                    recipientProviders: [[$class: 'RequesterRecipientProvider']],
                    mimeType : "text/plain",
                    to: mailList
                )
            }
        }

        stage("signoff_dpdk") {
            def owner = ''
            checkout scm
            withCredentials([string(credentialsId: 'DPDK_MAIL_LIST_SIGNOFF', variable: 'DPDK_MAIL_LIST_SIGNOFF')]) {
                def mailList = ""
                def utils = load(env.UTILS_PATH)
                if (utils.isJobCronTriggered()) {
                    mailList = DPDK_MAIL_LIST_SIGNOFF
                }
                try {
                    echo "Ask for manual sign-off from the owner"
                    timeout(time: 72, unit: 'HOURS') {
                        signoff = input(message: "Are you sure you want to sign off DPDK ${dpdkTagsFormatted}?",
                            parameters: [string(defaultValue: 'Press Proceed/Abort after verifying the test results', description: '', name: '')],
                            submitterParameter: "USER")
                        owner = signoff["USER"].toString()
                    }
                    env.SIGNED_OFF_BY = owner
                    env.SIGNED_OFF_RESULT = "true"
                    emailext (
                        subject: "DPDK ${dpdkTagsFormatted} signed off by ${env.SIGNED_OFF_BY}",
                        to: mailList,
                        recipientProviders: [[$class: 'RequesterRecipientProvider']],
                        mimeType : "text/html",
                        body: """
                            Hello,<br/><br/>
                            DPDK ${dpdkTagsFormatted} signed off by ${env.SIGNED_OFF_BY}.<br/>
                            URL: ${env.BUILD_URL}<br/><br/>
                            Thank you,<br/>Jenkins CI
                        """
                    )
                } catch (exc) {
                    env.SIGNED_OFF_BY = exc.getCauses()[0].getUser().getId().toString()
                    env.SIGNED_OFF_RESULT = "false"

                    emailext (
                        subject: "DPDK ${dpdkTagsFormatted} can't be signed off. ${env.SIGNED_OFF_BY}",
                        to: mailList,
                        recipientProviders: [[$class: 'RequesterRecipientProvider']],
                        mimeType : "text/html",
                        body: """
                            Hello,<br/><br/>
                            DPDK ${dpdkTagsFormatted} not signed off - ${env.SIGNED_OFF_BY}<br/>
                            URL: ${env.BUILD_URL}<br/><br/>
                            Thank you,<br/>Jenkins CI
                        """
                    )
                }
            }
        }
        stage ("report_status_end") {
            node ("meta_slave") {
                checkout scm
                env.END_DATE = new java.sql.Timestamp(new Date().getTime())
                try {
                    reportPipelineStatus("end")
                } catch (exc) {
                    println exc
                }
            }
        }
    }
} else {
    echo "No new DPDK tags have been found."
}
