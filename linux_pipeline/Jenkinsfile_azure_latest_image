#!/usr/bin/env groovy

def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

properties ([
    overrideIndexTriggers(false),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'StringParameterDefinition',
            name: 'AZURE_IMAGES',
            defaultValue: 'Canonical UbuntuServer 18.04-DAILY-LTS latest',
            description: 'Azure images to be tested, comma separated.'],
        [$class: 'StringParameterDefinition',
            name: 'AZURE_REGIONS',
            defaultValue: 'westus2',
            description: 'Azure regions to be tested, comma separated']
        ]
    ]
])

def gitRemoteUrl = "https://github.com/lis/LISAv2.git"
def gitBranchName = "master"
def azureImages = env.AZURE_IMAGES.split(",")
def azureRegions = env.AZURE_REGIONS.split(",")
def sgxRegion = "uksouth".split(",")
def SGX = "VALIDATE-INTEL-SGX-DRIVER-FOR-DC-VM"
def P1_EXCLUDE = "PERF-*,INFINIBAND-HPCX-MPI-2VM"

if (!azureImages || !azureRegions) {
  throw 'Failed to validate the pipeline parameters'
}

azureImages.each {
    stage("P0-${it}") {
        def currentImage = "${it}".trim()
        ARMImage = [:]

        azureRegions.each {
            def currentRegion = "${it}"
            ARMImage["${currentRegion}"] = {
                try {
                    node('azure') {
                        withCredentials([file(credentialsId: 'Azure_Secrets_TESTONLY_File',
                                         variable: 'Azure_Secrets_File')]) {
                            echo "Current Image: ${currentImage}, Current Region: ${currentRegion}"
                            cleanWs()
                            git branch: gitBranchName, url: gitRemoteUrl
                            RunPowershellCommand(".\\Run-LisaV2.ps1" +
                            " -TestLocation '${currentRegion}'" +
                            " -RGIdentifier '${currentRegion}'" +
                            " -TestPlatform  'Azure'" +
                            " -ARMImageName '${currentImage}'" +
                            " -TestPriority '0'" +
                            " -XMLSecretFile '${Azure_Secrets_File}'" +
                            " -CustomParameters 'DiskType=Managed'" +
                            " -ResourceCleanup Delete" +
                            " -EnableTelemetry" +
                            " -ExitWithZero"
                            )
                            archiveArtifacts '*-TestLogs.zip'
                            junit "Report\\*-junit.xml"
                        }
                    }
                } catch (exc) {
                    println "${currentRegion}: STAGE_FAILED_EXCEPTION."
                    currentBuild.result = 'FAILURE'
                } finally {
                    echo "Cleaning up environment"
                }
            }
        }

        parallel ARMImage
    }

    stage("P1-${it}") {
        def currentImage = "${it}".trim()
        ARMImage = [:]

        azureRegions.each {
            def currentRegion = "${it}"
            ARMImage["${currentRegion}"] = {
                try {
                    node('azure') {
                        withCredentials([file(credentialsId: 'Azure_Secrets_TESTONLY_File',
                                         variable: 'Azure_Secrets_File')]) {
                            echo "Current Image: ${currentImage}, Current Region: ${currentRegion}"
                            cleanWs()
                            git branch: gitBranchName, url: gitRemoteUrl
                            RunPowershellCommand(".\\Run-LisaV2.ps1" +
                            " -TestLocation '${currentRegion}'" +
                            " -RGIdentifier '${currentRegion}'" +
                            " -TestPlatform  'Azure'" +
                            " -ARMImageName '${currentImage}'" +
                            " -TestPriority '1'" +
                            " -ExcludeTests '${P1_EXCLUDE}'" +
                            " -XMLSecretFile '${Azure_Secrets_File}'" +
                            " -CustomParameters 'DiskType=Managed'" +
                            " -ResourceCleanup Delete" +
                            " -EnableTelemetry" +
                            " -ExitWithZero"
                            )
                            archiveArtifacts '*-TestLogs.zip'
                            junit "Report\\*-junit.xml"
                        }
                    }
                } catch (exc) {
                    println "${currentRegion}: STAGE_FAILED_EXCEPTION."
                    currentBuild.result = 'FAILURE'
                } finally {
                    echo "Cleaning up environment"
                }
            }
        }

        parallel ARMImage
    }

    stage("SGX-${it}") {
        def currentImage = "${it}".trim()
        ARMImage = [:]

        sgxRegion.each {
            def currentRegion = "${it}"
            if (currentImage.contains("gen2") && (currentImage.contains("18_04-lts-gen2") || currentImage.contains("16_04-lts-gen2"))) {
                ARMImage["${currentRegion}"] = {
                   try {
                        node('azure') {
                            withCredentials([file(credentialsId: 'Azure_Secrets_TESTONLY_File',
                                             variable: 'Azure_Secrets_File')]) {
                                echo "Current Image: ${currentImage}, Current Region: ${currentRegion}"
                                cleanWs()
                                git branch: gitBranchName, url: gitRemoteUrl
                                RunPowershellCommand(".\\Run-LisaV2.ps1" +
                                " -TestLocation '${currentRegion}'" +
                                " -RGIdentifier '${currentRegion}'" +
                                " -TestPlatform  'Azure'" +
                                " -ARMImageName '${currentImage}'" +
                                " -TestNames '${SGX}'" +
                                " -XMLSecretFile '${Azure_Secrets_File}'" +
                                " -CustomParameters 'DiskType=Managed'" +
                                " -ResourceCleanup Delete" +
                                " -EnableTelemetry" +
                                " -ExitWithZero"
                                )
                                archiveArtifacts '*-TestLogs.zip'
                                junit "Report\\*-junit.xml"
                            }
                        }
                    } catch (exc) {
                        println "${currentRegion}: STAGE_FAILED_EXCEPTION."
                        currentBuild.result = 'FAILURE'
                    } finally {
                        echo "Cleaning up environment"
                    }
                }
            } else {
                println "${currentImage}: not support SGX."
            }
        }

        parallel ARMImage
    }

    node ("meta_slave") {
        stage('Send-email') {
            withCredentials([string(credentialsId: 'MAIL_LIST', variable: 'MAIL_LIST')]) {
                def currentImage = "${it}".trim()
                emailext (
                    subject: "pipeline-azure-latest-image: test results for ${currentImage}",
                    to: "${env.MAIL_LIST}",
                    mimeType : "text/html",
                    body: '${SCRIPT, template="ubuntu.template"}'
                )
            }
        }
    }
}