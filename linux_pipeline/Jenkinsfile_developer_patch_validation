#!/usr/bin/env groovy

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def GetPerfServer(xmlName) {
    switch(xmlName) {
        case ~/TCP.*/:
            return "net_perf"
        case ~/UDP.*/:
            return "net_perf"
        case ~/FIO.*/:
            return "stor_perf"
         default:
            return "NullNode"
    }
}

pipeline {
    parameters {
        choice(choices: 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git\nhttps://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git\nazure_kernel', description: 'Kernel tree repo', name: 'KERNEL_GIT_URL')
        string(defaultValue: "master", description: 'Branch to be built', name: 'KERNEL_GIT_BRANCH')
        string(defaultValue: "", description: 'Valid examples: \n scp://my-scp-hostname:/home/my-username/patch.p1 \n scp://my-username@my-scp-hostname:/home/my-username/patch.p1 \n http://my-website.com/patch.p1 \n Use the space separator for multiple patches.' , name: 'KERNEL_PATCH')
        string(defaultValue: 'Standard_A2', description: 'Azure VM size', name: 'AZURE_VM_SIZE')
        choice(choices: """westus2\naustraliaeast\naustraliasoutheast\nbrazilsouth\ncanadacentral
                           canadaeast\ncentralindia\ncentralus\neastasia\neastus\neastus2\nfrancecentral
                           japaneast\njapanwest\nkoreacentral\nkoreasouth\nnorthcentralus\nnortheurope
                           southcentralus\nsoutheastasia\nsouthindia\nuksouth\nukwest\nwestcentralus
                           westeurope\nwestindia\nwestus\nsepremium""", description: 'Azure Region', name: 'AZURE_REGION')
        string(defaultValue: "", description: 'Azure stress test parameter for reboot number', name: 'AZURE_STRESS_REBOOT_NUMBER')
        string(defaultValue: "", description: 'Azure stress test parameter for provision number', name: 'AZURE_STRESS_PROVISION_NUMBER')
        string(defaultValue: "", description: 'Lisa test suite', name: 'LISA_TEST_SUITE')
        choice(choices: "kernel_pipeline_bvt.xml\nkernel_pipeline_fvt.xml\ntest_kernel_pipeline.xml", description: 'Which xml should LISA run for functional test', name: 'LISA_TEST_XML')
        choice(choices: "TCP_SRIOV_v4.xml\nUDP_SRIOV_v4.xml\nFIO_RAID0_Pipeline.xml", description: 'Which xml should LISA run for performance test', name: 'LISA_PERF_TEST_XML')
        string(defaultValue: "", description: 'Options for perf test.', name: 'LISA_PERF_OPTIONS')
        string(defaultValue: "", description: 'Custom build tag for artifacts', name: 'CUSTOM_BUILD_TAG')
        string(defaultValue: "build_artifacts, publish_temp_artifacts, boot_test, publish_artifacts, validation, validation_functional, validation_perf, validation_functional_hyperv, validation_perf_hyperv",
            description: 'What stages to run. By default all stages are enabled', name: 'ENABLED_STAGES')
    }
    environment {
        KERNEL_ARTIFACTS_PATH = 'dev-patch-kernels'
        UBUNTU_VERSION = '16'
        BUILD_PATH = '/mnt/tmp/developer-kernel-build-folder'
        KERNEL_CONFIG = 'Microsoft/config-azure'
        CLEAN_ENV = 'True'
        USE_CCACHE = 'True'
        AZURE_MAX_RETRIES = '60'
        BUILD_NAME = 'd'
        FOLDER_PREFIX = 'dev'
        OS_TYPE = 'ubuntu'
        OS_VERSION = '16.04.5'
        THREAD_NUMBER = 'x3'
        CLONE_DEPTH = '1'
        CREATE_CHANGELOG = 'False'
        USE_KERNEL_FOLDER_PREFIX = 'True'
        INSTALL_DEPS = 'True'
    }
    options {
        overrideIndexTriggers(false)
    }
    agent {
        node {
            label 'meta_slave'
        }
    }
    stages {
        stage('build_artifacts') {
            when {
                beforeAgent true
                expression { params.ENABLED_STAGES.contains('build_artifacts') }
            }
            agent {
                node {
                    label 'ubuntu_kernel_builder'
                }
            }
            steps {
                withCredentials(bindings: [string(credentialsId: 'MSFT_KERNEL_GIT_URL', variable: 'MSFT_KERNEL_GIT_URL'),
                                           string(credentialsId: 'SCP_USERNAME_DEFAULT', variable: 'SCP_USERNAME_DEFAULT')]) {
                    sh '''#!/bin/bash
                          set -xe -o pipefail
                          if [[ "$KERNEL_GIT_URL" == "azure_kernel" ]]; then
                              KERNEL_GIT_URL=${MSFT_KERNEL_GIT_URL}
                          fi
                          echo "Building artifacts..."
                          pushd "$WORKSPACE/scripts/package_building"
                          echo ${KERNEL_PATCH} | tr ' ' '\n' > developer_patches
                          i='0'
                          IFS=$'\t\n'
                          for url in $(cat developer_patches); do
                              i=$(( i + 1 ))
                              protocol=${url%%://*}
                              url=${url#*//}
                              test_user=${url%%*@*}
                              if [[ $protocol == "scp" ]] && [[ $test_user != "" ]]; then
                                  sed -i "${i}s/.*/scp:\\/\\/$SCP_USERNAME_DEFAULT@${url//\\//\\\\/}/" developer_patches
                              fi
                          done
                          IFS=$' '
                          bash build_artifacts.sh \\
                              --git_url "${KERNEL_GIT_URL}" \\
                              --git_branch "${KERNEL_GIT_BRANCH}" \\
                              --destination_path "${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}" \\
                              --install_deps "${INSTALL_DEPS}" \\
                              --thread_number "${THREAD_NUMBER}" \\
                              --debian_os_version "${UBUNTU_VERSION}" \\
                              --build_path "${BUILD_PATH}" \\
                              --kernel_config "${KERNEL_CONFIG}" \\
                              --clean_env "${CLEAN_ENV}" \\
                              --use_ccache "${USE_CCACHE}" \\
                              --use_kernel_folder_prefix "${USE_KERNEL_FOLDER_PREFIX}" \\
                              --clone_depth "${CLONE_DEPTH}" \\
                              --patch_file "developer_patches" \\
                              --create_changelog "${CREATE_CHANGELOG}" \\
                              --custom_build_tag="${CUSTOM_BUILD_TAG}"
                          popd
                          '''
                }
                sh '''#!/bin/bash
                  echo ${BUILD_NUMBER}-$(crudini --get scripts/package_building/kernel_versions.ini KERNEL_BUILT folder) > ./build_name
                '''
                script {
                  currentBuild.displayName = readFile "./build_name"
                }
                stash includes: 'scripts/package_building/kernel_versions.ini', name: 'kernel_version_ini'
                stash includes: ("scripts/package_building/${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/deb/**"),
                name: "${env.KERNEL_ARTIFACTS_PATH}"
                dir ("scripts/package_building") {
                    stash includes: "${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/deb/**", name: "SHORT_KERNEL_PATH"
                }
                sh '''
                    set -xe
                    rm -rf "scripts/package_building/${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}"
                    '''
                archiveArtifacts 'scripts/package_building/kernel_versions.ini'
            }
        }
        stage('publish_temp_artifacts') {
            when {
                beforeAgent true
                expression { params.ENABLED_STAGES.contains('publish_temp_artifacts') }
            }
            agent {
                node {
                    label 'meta_slave'
                }
            }
            steps {
                dir("${env.KERNEL_ARTIFACTS_PATH}${env.BUILD_NUMBER}${env.BRANCH_NAME}") {
                    unstash "${env.KERNEL_ARTIFACTS_PATH}"
                    withCredentials([string(credentialsId: 'MSFT_KERNEL_GIT_URL', variable: 'MSFT_KERNEL_GIT_URL'),
                                     string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                                        usernamePassword(credentialsId: 'smb_share_user_pass',
                                                    passwordVariable: 'PASSWORD',
                                                    usernameVariable: 'USERNAME')]) {
                        sh '''#!/bin/bash
                            set -xe
                            if [[ "$KERNEL_GIT_URL" == "azure_kernel" ]]; then
                                KERNEL_GIT_URL=${MSFT_KERNEL_GIT_URL}
                            fi
                            folder_prefix="${KERNEL_GIT_URL##*/}"
                            folder_prefix="${folder_prefix%.*}"
                            bash "${WORKSPACE}/scripts/utils/publish_artifacts_to_smb.sh" \\
                                --build_number "${BUILD_NUMBER}-${BRANCH_NAME}" \\
                                --smb_url "${SMB_SHARE_URL}/temp-kernel-artifacts" --smb_username "${USERNAME}" \\
                                --smb_password "${PASSWORD}" --artifacts_path "${KERNEL_ARTIFACTS_PATH}" \\
                                --artifacts_folder_prefix "${folder_prefix}"
                            '''
                    }
                }
            }
        }
        stage('boot_test') {
            when {
                beforeAgent true
                expression { params.ENABLED_STAGES.contains('boot_test') }
            }
            agent {
                node {
                    label 'meta_slave'
                }
            }
            steps {
                withCredentials(bindings: [string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                                           usernamePassword(credentialsId: 'smb_share_user_pass', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')
                                           ]) {
                    dir('kernel_version' + env.BUILD_NUMBER + env.BRANCH_NAME) {
                        unstash 'kernel_version_ini'
                        sh 'cat scripts/package_building/kernel_versions.ini'
                    }
                    sh '''
                        bash scripts/azure_kernel_validation/validate_azure_vm_boot.sh \
                            --build_name $BUILD_NAME --build_number "${BUILD_NUMBER}${BRANCH_NAME}" \
                            --smb_share_username $USERNAME --smb_share_password $PASSWORD \
                            --smb_share_url $SMB_SHARE_URL --vm_user_name $OS_TYPE \
                            --os_type $OS_TYPE --flavor $AZURE_VM_SIZE --resource_location $AZURE_REGION
                        '''
                }

            }
            post {
                always {
                    archiveArtifacts "${env.BUILD_NAME}${env.BUILD_NUMBER}${env.BRANCH_NAME}-boot-diagnostics/*.log"
                }
                failure {
                    sh 'echo "Load failure test results."'
                    nunit(testResultsPattern: 'scripts/azure_kernel_validation/tests-fail.xml')
                }
                success {
                    echo "Cleaning Azure resources up..."
                    sh '''#!/bin/bash
                        pushd ./scripts/azure_kernel_validation
                        bash remove_azure_vm_resources.sh "${BUILD_NAME}${BUILD_NUMBER}${BRANCH_NAME}" "$AZURE_REGION"
                        popd
                        '''
                    archiveArtifacts 'scripts/azure_kernel_validation/tests.xml'
                    nunit(testResultsPattern: 'scripts/azure_kernel_validation/tests.xml')
                }
            }
        }
        stage('publish_artifacts') {
            when {
                beforeAgent true
                expression { params.ENABLED_STAGES.contains('publish_artifacts') }
            }
            agent {
                node {
                    label 'meta_slave'
                }
            }
            steps {
                dir("${env.KERNEL_ARTIFACTS_PATH}${env.BUILD_NUMBER}${env.BRANCH_NAME}") {
                    unstash "${env.KERNEL_ARTIFACTS_PATH}"
                    withCredentials([string(credentialsId: 'MSFT_KERNEL_GIT_URL', variable: 'MSFT_KERNEL_GIT_URL'),
                                     string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                                            usernamePassword(credentialsId: 'smb_share_user_pass',
                                            passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')
                                    ]) {
                        sh '''#!/bin/bash
                            set -xe
                            if [[ "$KERNEL_GIT_URL" == "azure_kernel" ]]; then
                                KERNEL_GIT_URL=${MSFT_KERNEL_GIT_URL}
                            fi
                            folder_prefix="${KERNEL_GIT_URL##*/}"
                            folder_prefix="${folder_prefix%.*}"
                            bash "${WORKSPACE}/scripts/utils/publish_artifacts_to_smb.sh" \\
                                --build_number "${BUILD_NUMBER}-${BRANCH_NAME}" \\
                                --smb_url "${SMB_SHARE_URL}/${folder_prefix}" --smb_username "${USERNAME}" \\
                                --smb_password "${PASSWORD}" --artifacts_path "${KERNEL_ARTIFACTS_PATH}" \\
                                --artifacts_folder_prefix "${folder_prefix}"
                            '''
                    }
                }
            }
        }
        stage('validation') {
            when {
                beforeAgent true
                expression { params.ENABLED_STAGES.contains('validation') }
            }
            parallel {
                stage('validation_functional_hyperv') {
                    when {
                        beforeAgent true
                        expression { params.ENABLED_STAGES.contains('validation_functional_hyperv') }
                    }
                    agent {
                        node {
                            label 'hyper-v'
                        }
                    }
                    steps {
                        withCredentials(bindings: [string(credentialsId: 'LISA_IMAGES_SHARE_URL', variable: 'LISA_IMAGES_SHARE_URL'),
                                                   string(credentialsId: 'AZURE_SAS', variable: 'AZURE_SAS'),
                                                   string(credentialsId: 'DEVELOPER_AZURE_STORAGE_URL', variable: 'DEVELOPER_AZURE_STORAGE_URL'),
                                                   string(credentialsId: 'LISA_TEST_DEPENDENCIES', variable: 'LISA_TEST_DEPENDENCIES')]) {
                            echo 'Running LISA...'
                            dir('kernel_version' + env.BUILD_NUMBER + env.BRANCH_NAME) {
                                unstash 'kernel_version_ini'
                            }
                            PowerShellWrapper('''
                            & ".\\scripts\\lis_hyperv_platform\\main.ps1"
                                -KernelVersionPath "kernel_version${env:BUILD_NUMBER}${env:BRANCH_NAME}\\scripts\\package_building\\kernel_versions.ini"
                                -JobId "${env:BUILD_NAME}${env:BUILD_NUMBER}${env:BRANCH_NAME}-functional"
                                -InstanceName "${env:BUILD_NAME}${env:BUILD_NUMBER}${env:BRANCH_NAME}-f"
                                -VHDType $env:OS_TYPE -WorkingDirectory "C:\\workspace"
                                -OSVersion "${env:OS_VERSION}"
                                -LISAImagesShareUrl "${env:LISA_IMAGES_SHARE_URL}" -XmlTest "${env:LISA_TEST_XML}"
                                -AzureToken "${env:AZURE_SAS}"
                                -AzureUrl "${env:DEVELOPER_AZURE_STORAGE_URL}/temp-kernel-artifacts"
                                -LisaTestDependencies "${env:LISA_TEST_DEPENDENCIES}"
                                -LisaTestSuite "${env:LISA_TEST_SUITE}"
                            ''')
                            echo 'Finished running LISA.'
                        }
                    }
                    post {
                        always {
                            archiveArtifacts "${BUILD_NAME}${BUILD_NUMBER}${BRANCH_NAME}-functional\\TestResults\\**\\*"
                            junit "${BUILD_NAME}${BUILD_NUMBER}${BRANCH_NAME}-functional\\TestResults\\**\\*.xml"
                        }
                    }
                }

                stage('validation_perf_hyperv') {
                    when {
                        beforeAgent true
                        expression { params.ENABLED_STAGES.contains('validation_perf_hyperv') && params.LISA_PERF_TEST_XML != "null" }
                    }
                    agent {
                        node {
                            label GetPerfServer(params.LISA_PERF_TEST_XML)
                        }
                    }
                    steps {
                        withCredentials(bindings: [string(credentialsId: 'LISA_IMAGES_SHARE_URL', variable: 'LISA_IMAGES_SHARE_URL'),
                                                   string(credentialsId: 'LISA_TEST_DEPENDENCIES', variable: 'LISA_TEST_DEPENDENCIES')]) {
                            echo 'Running LISA...'
                            unstash "${env.KERNEL_ARTIFACTS_PATH}"
                            PowerShellWrapper('''
                            & ".\\scripts\\lis_hyperv_platform\\main_perf.ps1"
                                -JobId "${env:BUILD_NAME}${env:BUILD_NUMBER}${env:BRANCH_NAME}-perf"
                                -InstanceName "${env:BUILD_NAME}${env:BUILD_NUMBER}${env:BRANCH_NAME}-p"
                                -VHDType $env:OS_TYPE -WorkingDirectory "C:\\workspace"
                                -OSVersion "${env:OS_VERSION}"
                                -LISAImagesShareUrl "${env:LISA_IMAGES_SHARE_URL}" -XmlTest "${env:LISA_PERF_TEST_XML}"
                                -LisaTestDependencies "${env:LISA_TEST_DEPENDENCIES}"
                                -LocalKernelFolder "scripts\\package_building\\${env:BUILD_NUMBER}-${env:BRANCH_NAME}-${env:KERNEL_ARTIFACTS_PATH}\\**\\deb"
                                -LisaPerfOptions "${env:LISA_PERF_OPTIONS}"
                            ''')
                            echo 'Finished running LISA.'
                        }
                    }
                    post {
                        always {
                            archiveArtifacts "${BUILD_NAME}${BUILD_NUMBER}${BRANCH_NAME}-perf\\lis-test\\WS2012R2\\lisa\\TestResults\\**\\*"
                        }
                    }
                }
                
                stage('validation_stress_azure') {
                    when {
                        beforeAgent true
                        expression { params.ENABLED_STAGES.contains('validation_stress_azure') }
                    }
                    agent {
                        node {
                            label 'azure'
                        }
                    }
                    steps {
                        withCredentials(bindings: [file(credentialsId: 'Dev_Azure_Secrets_File', variable: 'Dev_Azure_Secrets_File'),
                                                   string(credentialsId: 'AZURE_STORAGE_ACC', variable: 'AZURE_STORAGE_ACC'),
                                                   string(credentialsId: 'AZURE_RESOURCE_GROUP', variable: 'AZURE_RESOURCE_GROUP')]) {
                            echo 'Running LISA...'
                            unstash "SHORT_KERNEL_PATH"
                            PowerShellWrapper('''
                            & ".\\scripts\\azure_kernel_validation\\main-stress-azure.ps1"
                                -AzureSecretsPath "${env:Dev_Azure_Secrets_File}"
                                -Identifier "kernel-val-${env:BUILD_NAME}${env:BUILD_NUMBER}${env:BRANCH_NAME}"
                                -WorkingDir "C:\\workspace"
                                -BaseImage 'Canonical UbuntuServer 16.04-LTS latest'
                                -TestCase "STRESSTEST-VERIFY-RESTART"
                                -TestParameters "rebootNumber=${env:AZURE_STRESS_REBOOT_NUMBER}"
                                -TestIterations "${env:AZURE_STRESS_PROVISION_NUMBER}"
                                -AzureLocation "${env:AZURE_REGION}"
                                -KernelDir "${env:BUILD_NUMBER}-${env:BRANCH_NAME}-${env:KERNEL_ARTIFACTS_PATH}\\**\\deb"
                                -ResultsDest ".\\results"
                                -CleanVhd $true
                                -StorageAccount "${env:AZURE_STORAGE_ACC}"
                                -ResourceGroup "${env:AZURE_RESOURCE_GROUP}"
                            ''')
                            echo 'Finished running LISA.'
                        }
                    }
                    post {
                        always {
                            archiveArtifacts "results\\*"
                        }
                    }
                }
            }
        }
    }
}