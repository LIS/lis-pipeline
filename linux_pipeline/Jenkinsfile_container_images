#!/usr/bin/env groovy

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    def exitCode = bat (returnStatus: true, script: "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\"")
    return exitCode
}

properties ([
    disableConcurrentBuilds(),
    pipelineTriggers([cron('H H/12 * * *')]),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_URL',
            defaultValue: "",
            description: 'Url to the kernel to be tested'],
        [$class: 'StringParameterDefinition',
            name: 'INITRD_URL',
            defaultValue: "",
            description: 'Url to the initrd to be tested'],
        // Smoke tests
        [$class: 'BooleanParameterDefinition', 
            defaultValue: true, 
            description: 'Run binaries version test', 
            name: 'binaries_check'],
        [$class: 'BooleanParameterDefinition', 
            defaultValue: true, 
            description: 'Test kernel boot speed in VM', 
            name: 'Boot_Test'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            description: 'Run ltp tests in docker container',
            name: 'LTP'],
        [$class: 'ChoiceParameterDefinition',
            choices: "RS5\nRS4",
            name: 'HOST_VERSION',
            description: 'Windows host versions.']
        ]
    ]
])

// This value represents the number of Passed tests in the base kernel
// and it's used to validate newer versions of the LCOW kernel.
// If the number of Passed tests is lower than the base one,
// the stage will fail.
// Kernel Version: 4.14.29-linuxkit
env.LINUXKIT_BASE_NUMBER = "58"

// This value represents the number of expected failures in the hyperv test stage
// The stage will fail if the number of failures is greater than HYPERV_BASE_NUMBER
// default to 5 failures
env.HYPERV_BASE_NUMBER = "5"

env.LAST_VERSION_FILE = "C:\\LCOW_LATEST_VERSION.txt"
env.ARTIFATCS_DESTINATION = "C:\\Program Files\\Linux Containers"
env.BINARIES_DESTINATION = "C:\\lcow-bin"
env.LINUXKIT_REPO = "https://github.com/linuxkit/lcow"
env.LINUXKIT_BRANCH = "master"
env.OPENGCS_REPO = "https://github.com/Microsoft/opengcs.git"
env.OPENGCS_BRANCH = "master"
env.DOCKER_STRESS_REPO = "https://github.com/progrium/docker-stress.git"
env.DOCKER_STRESS_BRANCH = "master"
env.DOCKER_KERNEL_BUILDER_REPO = "https://github.com/moul/docker-kernel-builder.git"
env.DOCKER_KERNEL_BUILDER_BRANCH = "master"
env.DOCKER_HYPERV_TEST_REPO = "https://linuxpipelineshare.blob.core.windows.net/lcow/hypervlcowtest.zip"
HYPERV_TEST_JOB = "lcow-hyperv-testing,LKP"

STAGES_RESULTS = [:]
STAGES_SUMMARY = [:]
versionsMap = ["RS4":"lcow-win-rs4","RS5":"lcow_windows_rs5"]
testMap = ["smoke_tests":"binaries_check,Boot_Test","test_functional":"LTP"]
def hostName = versionsMap[env.HOST_VERSION]
ignoreReport = "kernel_hyperv_test,LKP"
skipBuild = false
BUILD_NAME = ""
URL_ID = ""

def runTests(versionsMap, hostName){
    testMap.keySet().each {
        def section = it
        def sectionTests = testMap[section].split(",")

        stage (section) {
            def runs = [:]
            sectionTests.each {
                if (env[it] == "true") {
                    runs[it] = {
                        node (hostName) {
                            runTestStage(it)
                        }
                    }
                }
            }

            try {
                parallel runs
            } catch (exc) {
                currentBuild.result = 'SUCCESS'
            }
        }
    }
}

def runTestStage(testName) {
    switch (testName) {
        case "linuxkit":
            runLinuxKitTesting()
            break
        case "opengcs_build":
            buildOpenGCS()
            break
        case "docker_stress":
            runStressTest()
            break
		case "kernel_builder":
            runKernelBuildTest()
            break
        case "binaries_check":
            runBinariesCheck()
            break
		case "docker_test":
            runDockerTest()
            break
        case "kernel_hyperv_test":
            runHypervTest()
            break
        case "WSL_Docker":
            runDockerWsl()
            break
        case "LKP":
            runLkp()
            break
        case "LTP":
            runLtp()
            break
        case "Boot_Test":
            runBootSpeedTest()
        default:
            println ("Test: ${testName} not defined. Skipping.")
    }
}

def createStageReport(stageName, testType, logPath, exitCode) {
    def script = ".\\scripts\\lcow\\New-Report.ps1"
    def scriptExists = fileExists(script)
    if (! scriptExists) {
        error("Cannot find New-Report.ps1. Repo may not be cloned")
    }

    def eCode = PowerShellWrapper("""
        & '${script}'
            -StageName '${stageName}'
            -TestType '${testType}'
            -LogPath '${logPath}'
            -ExitCode '${exitCode}'
            -ReportDestination '.\\${stageName}-Dir'
            -BuildNumber '${BUILD_NAME}'
            -StageSummary '.\\summary.log'
    """)

    def summaryExists = fileExists 'summary.log'
    if (summaryExists) {
        def summary = readFile 'summary.log'
        STAGES_SUMMARY[stageName] = summary.trim()
    }

    if (eCode != 0) {
        error("Test script returned exit code: ${eCode}")
    }

    stash includes: "${stageName}-Dir\\*", name: "${stageName}_report"
}

def sendMailReport(reportStage) {
    stage ("send_report") {
        node ("jenkins-meta-slave") {
            withCredentials(bindings: [string(credentialsId: 'LCOW_MAIL_LIST', variable: 'MAIL_LIST')]) {
                dir ("lcow-mail-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                    def mailBody = ""
                    if (reportStage == "START") {
                        mailBody = "Hello,</br></br>\nLCOW validation pipeline #${env.BUILD_NUMBER} started.</br>\n"
                        mailBody += "Build ID: ${BUILD_NAME}</br>\n"
                        mailBody += "Jenkins URL: ${env.RUN_DISPLAY_URL}</br>\n</br>\n"
                        mailBody += "Thank you,</br>\nJenkins CI"
                    } else if (reportStage == "FINISH") {
                        mailBody = "Hello,</br></br>\nLCOW validation pipeline #${env.BUILD_NUMBER} finished testing.</br>\n"
                        mailBody += "Build ID: ${BUILD_NAME}</br>\n"
                        mailBody += "Jenkins URL: ${env.RUN_DISPLAY_URL}</br>\n</br>\n"
                        mailBody += "Testing Summary:</br>\n"
                        mailBody += '<table cellspacing="0">\n'
                        STAGES_RESULTS.keySet().each {
                            def key = it
                            def result = ""
                            if (STAGES_RESULTS[key] != 0) {
                                result = "FAIL"
                                color = "#FF0000"
                            } else {
                                result = "PASS"
                                color = "#32B232"
                            }

                            mailBody +='<tr bgcolor="'+ "${color}" + '"><td style="border: 1px solid black">&nbsp' + "${key}" + '&nbsp</td><td style="border: 1px solid black">&nbsp' + "${result}" + '&nbsp</td>'
                            if (STAGES_SUMMARY[key]) {
                                mailBody += '<td style="border: 1px solid black">&nbsp' + STAGES_SUMMARY[key] + '&nbsp</td>'
                            }
                            mailBody += '</tr>\n'
                        }

                        mailBody += "</table>"
                    }

                    println(mailBody)

                    emailext (
                        subject: "LCOW validation pipeline: ${env.BUILD_NUMBER}.",
                        to: "${MAIL_LIST}",
                        mimeType : "text/html",
                        body: mailBody
                    )

                    deleteDir()
                }
            }
        }
    }
}

def runBootSpeedTest() {
    dir ("lcow-boot-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        withCredentials(bindings: [string(credentialsId: 'LCOW_IMAGE_PATH', variable: 'IMAGE_PATH')]) {
            checkout scm
            unstash "LISA"
            echo 'Starting boot test'
            dir (".\\WS2012R2\\lisa") {
                unstash "lcow_kernel_packages"
                def exitCode = PowerShellWrapper('''
                    & ".\\lisa.ps1 -cmdVerb run -cmdNoun .\\xml\\boot_test.xml"
                        -dbgLevel "9"
                        -CLImageStorDir "${env:IMAGE_PATH}"
                        -testParams ('BASE_TIME=300ms;REMOTE_DIR=/tmp/kernel;ARTIFACTS_DIR=' + "$(pwd)" + '\\lcow-artifacts\\packages\\')
                        ''')
                STAGES_RESULTS["Boot_Test"] = exitCode
                archiveArtifacts artifacts: "TestResults\\**\\*", allowEmptyArchive: true
            }

            createStageReport("Boot_Test", "BOOT_TEST", ".\\WS2012R2\\lisa\\TestResults\\**\\", STAGES_RESULTS["Boot_Test"])
            if (STAGES_RESULTS["Boot_Test"] != 0) {
                error("Test script returned exit code: ${STAGES_RESULTS['Boot_Test']}")
            }
        }
        deleteDir()
    }
}

def runBinariesCheck () {
    dir ("lcow-bin-test-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Starting binaries checking'
        def exitCode = PowerShellWrapper('''
            & ".\\scripts\\lcow\\Run-BinariesCheck.ps1"
                -XmlConfig ".\\scripts\\lcow\\BIN_CONFIG.xml"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -WorkDir "C:\\lcow-testing\\workdir-bin-check-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\bin-check-logs"
            ''')
        STAGES_RESULTS["binaries_check"] = exitCode
        archiveArtifacts artifacts: "bin-check-logs\\*", allowEmptyArchive: true
        createStageReport("binaries_check", "STRESS", "", exitCode)
        if (exitCode != 0) {
            error("Test script returned exit code: ${exitCode}")
        }
        deleteDir()
    }
}

def runDockerTest() {
     dir ("lcow-docker-test-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
         checkout scm
         echo 'Starting hyperv docker test'
         def exitCode = PowerShellWrapper('''
             & ".\\scripts\\lcow\\Run-hypervtest.ps1"
                 -BinariesPath "${env:BINARIES_DESTINATION}"
				 -TestRepo "${env:DOCKER_HYPERV_TEST_REPO}"
                 -WorkDir "C:\\lcow-testing\\workdir-hypervtest-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                 -LogDestination ".\\hypervtest-logs"
                 -BaseNumber "${env:HYPERV_BASE_NUMBER}"
             ''')
        STAGES_RESULTS["docker_test"] = exitCode
        archiveArtifacts artifacts: "hypervtest-logs\\*", allowEmptyArchive: true
        createStageReport("docker_test", "DOCKER_HYPERV", ".\\hypervtest-logs", exitCode)
        if (exitCode != 0) {
            error("Test script returned exit code: ${exitCode}")
        }
        deleteDir()
     }
 }

def runLtp() {
    dir ("lcow-ltp-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        withCredentials(bindings: [string(credentialsId: 'LCOW_IMAGE_PATH', variable: 'IMAGE_PATH')]) {
            checkout scm
            unstash "LISA"
            echo 'Starting ltp testing'
            dir (".\\WS2012R2\\lisa") {
                unstash "lcow_kernel_packages"
                def exitCode = PowerShellWrapper('''
                    & ".\\lisa.ps1 -cmdVerb run -cmdNoun .\\xml\\lcow_ltp.xml"
                        -dbgLevel "9"
                        -CLImageStorDir "${env:IMAGE_PATH}"
                        -testParams ('REMOTE_DIR=/tmp/kernel;ARTIFACTS_DIR=' + "$(pwd)" + '\\lcow-artifacts\\packages\\')
                        ''')
                STAGES_RESULTS["LTP"] = exitCode
                archiveArtifacts artifacts: "TestResults\\**\\*", allowEmptyArchive: true
            }
            createStageReport("LTP", "LTP", ".\\WS2012R2\\lisa\\TestResults\\**\\", STAGES_RESULTS["LTP"])
            if (STAGES_RESULTS["LTP"] != 0) {
                error("Test script returned exit code: ${STAGES_RESULTS['LTP']}")
            }
        }
        deleteDir()
    }
}

def runLinuxKitTesting() {
    dir ("lcow-linuxkit-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Starting linuxkit testing'
        def exitCode = PowerShellWrapper('''
            & ".\\scripts\\lcow\\Run-LinuxKit.ps1"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -TestRepo "${env:LINUXKIT_REPO}"
                -TestBranch "${env:LINUXKIT_BRANCH}"
                -WorkDir "C:\\lcow-testing\\workdir-linuxkit-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\linuxkit-logs"
                -BaseNumber "${env:LINUXKIT_BASE_NUMBER}"
            ''')
        STAGES_RESULTS["linuxkit"] = exitCode
        archiveArtifacts artifacts: "linuxkit-logs\\*", allowEmptyArchive: true
        createStageReport("linuxkit", "LINUXKIT", ".\\linuxkit-logs", exitCode)
        if (exitCode != 0) {
            error("Test script returned exit code: ${exitCode}")
        }
        deleteDir()
    }
}

def runDockerWsl() {
    withCredentials(bindings: [string(credentialsId: 'LCOW_WSL_PATH', variable: 'ARCHIVE_PATH')]) {
        dir ("lcow-docker-wsl-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
            checkout scm
            echo 'Starting wsl testing'
            def exitCode = PowerShellWrapper('''
                & ".\\scripts\\lcow\\Run-WslTest.ps1"
                    -ArchivePath "${env:ARCHIVE_PATH}"
                    -BinariesPath "${env:BINARIES_DESTINATION}"
                    -WorkDir "C:\\lcow-testing\\workdir-docker-wsl-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                    -LogDestination ".\\docker-wsl-logs"
                ''')
            STAGES_RESULTS["WSL_docker"] = exitCode
            archiveArtifacts artifacts: "docker-wsl-logs\\*", allowEmptyArchive: true
            createStageReport("WSL_Docker", "WSL", ".\\docker-wsl-logs", exitCode)
            if (exitCode != 0) {
                error("Test script returned exit code: ${exitCode}")
            }
            deleteDir()
        }
    }
}

def buildOpenGCS() {
    dir ("lcow-opengcs-build-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Building OpenGCS'
        def exitCode = PowerShellWrapper('''
            & ".\\scripts\\lcow\\Build-OpenGCS.ps1"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -TestRepo "${env:OPENGCS_REPO}"
                -TestBranch "${env:OPENGCS_BRANCH}"
                -WorkDir "C:\\lcow-testing\\workdir-gcs-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\opengcs-logs"
            ''')
        STAGES_RESULTS["opengcs_build"] = exitCode
        archiveArtifacts artifacts: "opengcs-logs\\*", allowEmptyArchive: true
        createStageReport("opengcs_build", "STRESS", "", exitCode)
        if (exitCode != 0) {
            error("Test script returned exit code: ${exitCode}")
        }
        deleteDir()
    }
}

def runStressTest() {
    dir ("lcow-docker-stress-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Starting stress testing'
        def exitCode = PowerShellWrapper('''
            & ".\\scripts\\lcow\\Run-StressTest.ps1"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -TestRepo "${env:DOCKER_STRESS_REPO}"
                -TestBranch "${env:DOCKER_STRESS_BRANCH}"
                -WorkDir "C:\\lcow-testing\\workdir-stress-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\stress-logs"
            ''')
        STAGES_RESULTS["docker_stress"] = exitCode
        archiveArtifacts artifacts: "stress-logs\\*", allowEmptyArchive: true
        createStageReport("docker_stress", "STRESS", "", exitCode)
        if (exitCode != 0) {
            error("Test script returned exit code: ${exitCode}")
        }
        deleteDir()
    }
}

def runKernelBuildTest() {
         dir ("lcow-kernel-build-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
             checkout scm
             echo 'Starting kernel builder test'
             def exitCode = PowerShellWrapper('''
                 & ".\\scripts\\lcow\\Run-KernelBuild.ps1"
                     -BinariesPath "${env:BINARIES_DESTINATION}"
                     -TestRepo "${env:DOCKER_KERNEL_BUILDER_REPO}"
                     -TestBranch "${env:DOCKER_KERNEL_BUILDER_BRANCH}"
                     -WorkDir "C:\\lcow-testing\\workdir-Kbuild-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                     -LogDestination ".\\Kbuild-logs"
                 ''')
            STAGES_RESULTS["kernel_builder"] = exitCode
            archiveArtifacts artifacts: "Kbuild-logs\\*", allowEmptyArchive: true
            createStageReport("kernel_builder", "STRESS", "", exitCode)
            if (exitCode != 0) {
                error("Test script returned exit code: ${exitCode}")
            }
            deleteDir()
         }
     }

def runLkp() {
    dir ("lcow-lkp-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        withCredentials(bindings: [string(credentialsId: 'LCOW_IMAGE_PATH', variable: 'IMAGE_PATH')]) {
            unstash "LISA"
            echo 'Starting lkp testing'
            dir (".\\WS2012R2\\lisa") {
                unstash "lcow_kernel_packages"
                def exitCode = PowerShellWrapper('''
                    & ".\\lisa.ps1 -cmdVerb run -cmdNoun .\\xml\\lcow_lkp.xml"
                        -dbgLevel "9"
                        -CLImageStorDir "${env:IMAGE_PATH}"
                        -testParams ('REMOTE_DIR=/tmp/kernel;ARTIFACTS_DIR=' + "$(pwd)" + '\\lcow-artifacts\\packages\\')
                ''')
                STAGES_RESULTS["LKP"] = exitCode
                archiveArtifacts artifacts: "TestResults\\**\\*", allowEmptyArchive: true
            }
            if (STAGES_RESULTS["LKP"] != 0) {
                error("Test script returned exit code: ${STAGES_RESULTS['LKP']}")
            }
        }
        deleteDir()
    }
}

stage ("check_kernel") {
    node (hostName) {
        withCredentials(bindings: [string(credentialsId: 'LCOW_VSTS_USERNAME', variable: 'LCOW_VSTS_USERNAME'),
                                   string(credentialsId: 'LCOW_VSTS_TOKEN', variable: 'LCOW_VSTS_TOKEN'),
                                   string(credentialsId: 'VSTS_REST_URL', variable: 'VSTS_REST_URL'),
                                   string(credentialsId: 'LCOW_VSTS_INSTANCE', variable: 'LCOW_VSTS_INSTANCE'),
                                   string(credentialsId: 'LCOW_VSTS_FEED', variable: 'LCOW_VSTS_FEED')]) {
            dir ("lcow-artifacts-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                checkout scm
                def exitCode = PowerShellWrapper('''
                    & ".\\scripts\\lcow\\Get-Artifacts.ps1"
                        -UserName "${env:LCOW_VSTS_USERNAME}"
                        -Token "${env:LCOW_VSTS_TOKEN}"
                        -VstsUrl "${env:VSTS_REST_URL}"
                        -VstsFeed "${env:LCOW_VSTS_FEED}"
                        -VstsInstance "${env:LCOW_VSTS_INSTANCE}"
                        -PackageName "lsg-linux-test-lcow"
                        -VersionsFile "${env:LAST_VERSION_FILE}"
                        -KernelUrl "${env:KERNEL_URL}"
                        -InitrdUrl "${env:INITRD_URL}"
                        -ArtifactsDestination ".\\lcow-artifacts"
                        -BuildIDDestination ".\\build_name"
                ''')
                if (exitCode != 0) {
                    error("Test script returned exit code: ${exitCode}")
                }

                if (fileExists("./urlID.txt")) {
                    URL_ID = readFile "./urlID.txt"
                    URL_ID = URL_ID.trim()
                }

                BUILD_NAME = readFile "./build_name"
                if (BUILD_NAME != "" ) {
                    currentBuild.displayName = BUILD_NAME.trim() + "-${env.BUILD_NUMBER}"
                    stash includes: 'lcow-artifacts\\*', name: 'lcow_artifacts'
                    stash includes: 'lcow-artifacts\\packages\\*', name: 'lcow_kernel_packages'
                } else {
                    echo "No new artifacts found"
                    skipBuild = true
                }
                deleteDir()
            }
        }
    }
}

if (!skipBuild) {
    stage ("prepare_env") {
        node (hostName) {
            dir ("lisa-clone-dir") {
                withCredentials(bindings: [string(credentialsId: 'LISA_DEPS_PATH', variable: 'LISA_DEPS_PATH')]) {
                    git branch: 'lcow-testing', url: 'https://github.com/mbivolan/lis-test'
                    PowerShellWrapper('Copy-Item -Recurse -Force "${env:LISA_DEPS_PATH}\\bin\\*" ".\\WS2012R2\\lisa\\bin"')
                    PowerShellWrapper('Copy-Item -Recurse -Force "${env:LISA_DEPS_PATH}\\tools\\*" ".\\WS2012R2\\lisa\\tools"')
                    PowerShellWrapper('Copy-Item -Recurse -Force "${env:LISA_DEPS_PATH}\\ssh\\*" ".\\WS2012R2\\lisa\\ssh"')
                    stash includes: '**', name: 'LISA'
                }
                deleteDir()
            }
            dir ("lcow-prepare-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                checkout scm
                echo "Preparing the host:${hostName} for testing"
                unstash 'lcow_artifacts'
                def exitCode = PowerShellWrapper('''
                    & ".\\scripts\\lcow\\Prepare-Env.ps1"
                        -BinariesDestination "${env:BINARIES_DESTINATION}"
                        -ArtifactsPath ".\\lcow-artifacts"
                        -ArtifactsDestination "${env:ARTIFATCS_DESTINATION}"
                        -WorkDir "C:\\lcow-testing"
                    ''')
                if (exitCode != 0) {
                    error("Test script returned exit code: ${exitCode}")
                }
                deleteDir()
            }
        }
    }

    sendMailReport ("START")

    runTests(versionsMap, hostName)

    sendMailReport ("FINISH")

    stage ("report_results") {
        node ("jenkins-meta-slave") {
            withCredentials(bindings: [file(credentialsId: 'LCOW_DB_CONFIG', variable: 'LCOW_DB_CONFIG')]) {
                dir ("lcow-report-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                    checkout scm
                    dir ("lcow-reports") {
                        testMap.keySet().each {
                            testMap[it].split(",").each {
                                if ((! ignoreReport.contains(it)) && (env[it] == "true")) {
                                    unstash "${it}_report"
                                }
                            }
                        }
                    }
                    sh 'ls -R ./lcow-reports'
                    sh """
                        bash ./scripts/reporting/report_lcow_result.sh \\
                            --report_dir './lcow-reports' \\
                            --db_config '${LCOW_DB_CONFIG}'
                    """
                    deleteDir()
                }
            }
        }
    }

    if (URL_ID != "") {
        stage ("publish_vsts_tags") {
            node (hostName) {
                withCredentials(bindings: [string(credentialsId: 'BASE_VSTS_URL', variable: 'VSTS_URL'),
                                           string(credentialsId: 'LCOW_VSTS_TOKEN', variable: 'LCOW_VSTS_TOKEN')]) {
                    dir ("lcow-report-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                        checkout scm
                        def tags = "JenkinsTested=True"
                        STAGES_RESULTS.keySet().each {
                            def result = ""
                            if (STAGES_RESULTS[key] != 0) {
                                result = "FAIL"
                            } else {
                                result = "PASS"
                            }
                            tags += "${it}=${result};"
                        }
                        def exitCode = PowerShellWrapper("""
                            & '.\\scripts\\lcow\\Publish-VstsTags.ps1'
                                -RestToken '${env.LCOW_VSTS_TOKEN}'
                                -BaseUrl '${env.VSTS_URL}'
                                -BuildID '${URL_ID}'
                                -Tags '${tags}'
                            """)

                        deleteDir()
                    }
                }
            }
        }
    }

    stage ("clear_env") {
        node (hostName) {
            dir ("lcow-prepare-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                checkout scm
                echo "Cleaning host:${hostName} after testing"
                def exitCode = PowerShellWrapper('''
                    & ".\\scripts\\lcow\\Clear-Env.ps1"
                        -BinariesPath "${env:BINARIES_DESTINATION}"
                        -ArtifactsPath "${env:ARTIFATCS_DESTINATION}"
                        -DockerdPath "C:\\Docker-Workspace"
                        -WorkDir "C:\\lcow-testing"
                    ''')
                if (exitCode != 0) {
                    error("Test script returned exit code: ${exitCode}")
                }
                deleteDir()
            }
        }
    }
}
