#!/usr/bin/env groovy

properties ([
    disableConcurrentBuilds(),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'StringParameterDefinition',
            name: 'DISTRO_VERSIONS',
            defaultValue: 'centos_all,rhel_all,oracle_all',
            description: 'Distros to be tested (default all)'],
        [$class: 'StringParameterDefinition',
            name: 'LIS_ARCHIVE_LINK',
            defaultValue: 'http://download.microsoft.com/download/6/8/F/68FE11B8-FAA4-4F8D-8C7D-74DA7F2CFC8C/lis-rpms-4.2.8.tar.gz',
            description: 'Link to the lis archive to be tested'],
        [$class: 'StringParameterDefinition',
            name: 'LIS_OLD_ARCHIVE_LINK',
            defaultValue: "http://download.microsoft.com/download/6/8/F/68FE11B8-FAA4-4F8D-8C7D-74DA7F2CFC8C/lis-rpms-4.2.7.tar.gz",
            description: 'Link to the previous lis version'],
        [$class: 'ChoiceParameterDefinition', choices: 'no\nyes',
            name: 'FULL_PERF_RUN',
            description: 'Full run local Hyper-V perf switch.'],
        [$class: 'StringParameterDefinition',
            name: 'ENABLED_TEST_CATEGORIES',
            defaultValue: "Functional,Community,Stress",
            description: 'What test categories to run'],
        [$class: 'StringParameterDefinition',
            name: 'ENABLED_TEST_AREAS',
            defaultValue: "LIS_DEPLOY,LIS,BACKUP,CORE,DYNAMIC_MEMORY,FCOPY,KDUMP,KVP,MIGRATION,NETWORK,PROD_CHECKPOINT,RUNTIME_MEMORY,SECUREBOOT,SRIOV,STORAGE,LTP,STRESS",
            description: 'What test areas to run'],
        [$class: 'StringParameterDefinition',
            name: 'EXCLUDE_TESTS',
            defaultValue: "PRODUCTION-CHECKPOINT-iSCSI",
            description: ''],
        [$class: 'StringParameterDefinition',
            name: 'RUN_SELECTED_TESTS',
            defaultValue: "",
            description: ''],
        [$class: 'StringParameterDefinition',
            name: 'TEST_PRIORITY',
            defaultValue: "0,1,2,3",
            description: ''],
        [$class: 'StringParameterDefinition',
            name: 'GIT_REPO',
            defaultValue: "https://github.com/LIS/LISAv2.git",
            description: ''],
        [$class: 'StringParameterDefinition',
            name: 'GIT_BRANCH',
            defaultValue: "master",
            description: ''],
        [$class: 'StringParameterDefinition',
            name: 'EXECUTION_TAG',
            defaultValue: "",
            description: '']
        ]
    ]
])

// defines deploy scenarios coverage - platform independent
def nodesMap = ["sriov":"rhel_7.3,rhel_7.4,centos_7.4,centos_7.3,rhel_7.3_gen2vm,rhel_7.5,centos_7.5,", \
                "ws2012":"centos_6.8_32bit,centos_6.8_x64,centos_6.9_32bit,rhel_6.7_gen2vm,rhel_6.8_x64,", \
                "ws2012r2":"rhel_6.4_32bit,rhel_6.4_x64,rhel_6.5,rhel_6.6_x64,rhel_6.6_32bit, \
                    centos_6.4_x64,centos_6.5_x64,rhel_6.9_x64,", \
                "ws2016":"oracle_6.5_rhck,oracle_6.9_rhck,oracle_7.4_rhck,oracle_7.0_rhck,centos_7.0_x64, \
                    centos_7.0_gen2vm,centos_7.2_x64,rhel_7.0,rhel_7.1,rhel_7.2,rhel_7.6,rhel_6.10_x64,"]

// defines host version mapping for functional test validation
def validationNodesMap = ["ws2016":"rhel_6.10_x64,rhel_7.4,centos_6.5_x64,centos_7.3,centos_7.2_x64,rhel_7.5,centos_7.5,", \
                          "ws2012r2":"rhel_6.6_x64,centos_7.4_gen2vm,rhel_6.4_32bit,rhel_7.0,centos_6.4_x64,rhel_6.9_x64,", \
                          "ws2012_fvt":"centos_6.8_x64,", \
                          "ws2012_bvt":"rhel_7.1,"]

def supportedDistros = nodesMap["ws2012"] + nodesMap["ws2012r2"] + nodesMap["ws2016"] + nodesMap["sriov"]

def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def getDistros (distros, supportedDistros) {
    def validatedDistros = []
    suppList = supportedDistros.split(",")
    distros = distros.split(",")

    for (distro in distros) {
        distroType = distro.split("_")[0]
        distroVersion = distro.split("_")[1]

        if (distroVersion.toLowerCase() == "all") {
            for (suppDistro in suppList){
                if (distroType.toLowerCase() == suppDistro.split("_")[0]) {
                    validatedDistros << suppDistro
                }
            }
        } else {
            if (supportedDistros.contains(distro.toLowerCase())) {
                validatedDistros << distro.toLowerCase()
            }
        }
    }
    return validatedDistros
}

def ErrorCount = 0
def FVTDistros = "centos_6.8_x64,centos_7.2_x64,rhel_6.6_x64,centos_7.4_gen2vm,rhel_6.10_x64,rhel_7.4,rhel_7.5,"
def BVTDistros = "centos_6.4_x64,rhel_7.1,rhel_6.4_32bit,rhel_6.9_x64,rhel_7.0,centos_6.5_x64,centos_7.3,centos_7.5,"
def SRIOVDistros = "rhel_7.3,rhel_7.4,centos_7.4,centos_7.3,rhel_7.3_gen2vm,rhel_7.5,centos_7.5,"

def CategoryAreaMap = ["Functional" : "LIS_DEPLOY,LIS,BACKUP,CORE,DYNAMIC_MEMORY,FCOPY,KDUMP,KVP,MIGRATION,NETWORK,PROD_CHECKPOINT,RUNTIME_MEMORY,SECUREBOOT,SRIOV,STORAGE",\
                "Community":"LTP",\
                "Stress":"STRESS" ]

def TestAndDistroMap = ["Functional-LIS_DEPLOY" : "${supportedDistros}",\
                "Functional-LIS" : "${supportedDistros}",\
                "Functional-BACKUP": "${FVTDistros}",\
                "Functional-CORE": "${FVTDistros}",\
                "Functional-DYNAMIC_MEMORY": "${FVTDistros}",\
                "Functional-FCOPY": "${FVTDistros}",\
                "Functional-KDUMP": "${SRIOVDistros}",\
                "Functional-KVP": "${FVTDistros}",\
                "Functional-MIGRATION": "${FVTDistros}",\
                "Functional-NETWORK": "${FVTDistros}",\
                "Functional-PROD_CHECKPOINT": "${FVTDistros}",\
                "Functional-RUNTIME_MEMORY": "${FVTDistros}",\
                "Functional-SECUREBOOT": "${FVTDistros}",\
                "Functional-SRIOV": "${FVTDistros}",\
                "Functional-STORAGE": "${FVTDistros}",\
                "Community-LTP": "${FVTDistros}",\
                "Stress-STRESS": "${FVTDistros}",\
                ]

def Prepare()
{
    retry(5)
    {
        unstash 'LISAv2'
    }
}

stage ("Prerequisite")
{
    node ("meta_slave")
    {
        cleanWs()
        git branch: env.GIT_BRANCH, url: env.GIT_REPO
        stash includes: '**', name: 'LISAv2'
        cleanWs()
    }
}

node("meta_slave") {

    DISTROS = getDistros (DISTRO_VERSIONS, supportedDistros)
    CategoryAreaMapKeySet = CategoryAreaMap.keySet()
    CategoryAreaMapSize = CategoryAreaMap.size()
    for (i=0;i<CategoryAreaMapSize; i++)
    {
        def CategoryAreaMapKeySetCounter = i
        def CurrentTestCategory = CategoryAreaMapKeySet[CategoryAreaMapKeySetCounter]
        CurrentTestAreas = CategoryAreaMap[CurrentTestCategory]
        for (j=0;j< CurrentTestAreas.split(",").length; j++)
        {
            def AreaCounter = j
            def CurrentArea = CurrentTestAreas.split(",")[AreaCounter]
            try {
                if ((env.ENABLED_TEST_CATEGORIES.split(",").contains(CurrentTestCategory)) && (env.ENABLED_TEST_AREAS.split(",").contains(CurrentArea))) {
                    def CurrentLogs = currentBuild.rawBuild.getLog(10000)
                    if (CurrentLogs == null) {
                        CurrentLogs = "Unable_To_Get_Logs"
                    }
                    stage ("${CurrentTestCategory}-${CurrentArea}") {
                        if ((!(CurrentLogs.contains("Aborted by")) && (!(CurrentLogs.contains("FlowInterruptedException"))))) {
                            def globalSleepTime = 0;
                            def branches = 0
                            def runs = [:]
                            def nodesMapLenght = nodesMap.size()
                            def nodesMapKeySet=nodesMap.keySet()
                            for (k=0; k < nodesMapLenght; k++) {
                                def CurrentNodeCounter = k
                                def testNode = nodesMapKeySet[CurrentNodeCounter]
                                def mappedDistros = nodesMap[testNode]
                                if (testNode != 'sriov') {
                                    testNode = 'ws2016'
                                }
                                def DISTROS_lenght = DISTROS.size()
                                for (l=0; l < DISTROS_lenght; l++) {
                                    def CurrentDistroCounter = l
                                    def CurrentDistro = DISTROS[CurrentDistroCounter]
                                    def CurrentStageDistros = TestAndDistroMap["${CurrentTestCategory}-${CurrentArea}"]
                                    if (mappedDistros.contains("${CurrentDistro},") && CurrentStageDistros != null) {
                                        if ((CurrentArea == "SRIOV" && testNode != 'sriov')) {
                                            //Skip the SRIOV Tests if testnode is not sriov.
                                        } else if (!(CurrentStageDistros.split(",").contains(CurrentDistro))) {
                                            println("${CurrentTestCategory}-${CurrentArea} is not enabled for ${CurrentDistro}")
                                        } else {
                                            branches = branches + 1
                                            runs ["${CurrentDistro}-${testNode}"] = {
                                                node ("${testNode}") {
                                                    try {
                                                        stage ("${CurrentDistro}-${testNode}") {
                                                        println ("stage ${CurrentDistro}-${testNode}")
                                                            withCredentials([string(credentialsId: 'REDMOND_VHD_SHARE', variable: 'LISAImagesShareUrl'),
                                                                file(credentialsId: 'HYPERV_LISAV2_SECRETS', variable: 'HYPERV_LISAV2_SECRETS')]) {
                                                                def sleepTime = globalSleepTime
                                                                globalSleepTime = globalSleepTime + 60
                                                                def lisSuite = ''
                                                                dir ("d${BUILD_NUMBER}") {
                                                                    checkout scm
                                                                    Prepare()
                                                                    RunPowershellCommand(".\\scripts\\lis_hyperv_platform\\lis-rpm-hyperv-tests-lisav2.ps1" +
                                                                        " -JobId '${CurrentDistro}-d-${BUILD_NUMBER}'" +
                                                                        " -DistroVersion '${CurrentDistro}'" +
                                                                        " -TestCategory ${CurrentTestCategory}" +
                                                                        " -TestArea ${CurrentArea}" +
                                                                        " -LISAImagesShareUrl '${env:LISAImagesShareUrl}'" +
                                                                        " -LisUrl '${env:LIS_ARCHIVE_LINK}'" +
                                                                        " -LisOldUrl '${env:LIS_OLD_ARCHIVE_LINK}'" +
                                                                        " -ExcludeTests '${env:EXCLUDE_TESTS}'" +
                                                                        " -IncludeTests '${env:RUN_SELECTED_TESTS}'" +
                                                                        " -ExecutionTag '${env:EXECUTION_TAG}'" +
                                                                        " -TestPriority '${env:TEST_PRIORITY}'" +
                                                                        " -Delay '${sleepTime}'"
                                                                    )
                                                                    junit "Report\\*-junit.xml"
                                                                    archiveArtifacts '*-TestLogs.zip'
                                                                }
                                                            }
                                                        }
                                                    } catch (exc) {
                                                        currentBuild.result = 'SUCCESS'
                                                        ErrorCount = ErrorCount + 1
                                                    } finally {
                                                        cleanWs()
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            try {
                                if ( branches != 0) {
                                    parallel runs
                                } else {
                                    println ("No tests in this stage.")
                                }
                            } catch (exc) {
                                currentBuild.result = 'SUCCESS'
                                ErrorCount = ErrorCount + 1
                            }
                        } else {
                            println("Aborting Stage : ${CurrentTestCategory}-${CurrentArea}")
                        }
                    }
                }
            } catch (exc) {
                currentBuild.result = 'SUCCESS'
                println("EXCEPTION")
                println(exc.toString());
                ErrorCount = ErrorCount + 1
            }
        }
    }
    if (ErrorCount == 0) {
        currentBuild.result = 'SUCCESS'
    } else {
        currentBuild.result = 'FAILURE'
    }
}